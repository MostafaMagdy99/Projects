
LM_Sensor_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00002cf4  00002d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800192  00800192  00002eba  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  00002ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000113b  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006163  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006323  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006537  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a017  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b324  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c225  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__vector_1>
       8:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 13 	call	0x26c4	; 0x26c4 <main>
      8a:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e7       	ldi	r22, 0x7C	; 124
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ec 57       	subi	r30, 0x7C	; 124
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <softwareDelayMs>:
/************************************************************************/
/*                        Software Delay functions                      */
/************************************************************************/

void softwareDelayMs(uint32 u32_delay_in_ms)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <softwareDelayMs+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <softwareDelayMs+0x8>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <softwareDelayMs+0xa>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	6b 83       	std	Y+3, r22	; 0x03
     efa:	7c 83       	std	Y+4, r23	; 0x04
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	19 c0       	rjmp	.+50     	; 0xf34 <softwareDelayMs+0x4a>
	/*looping for number of counts that each count is 1ms approximately*/
	while(u32_delay_in_ms > 0)
	{
		for (uint16 i = 0 ; i < 4000 ; i++);
     f02:	1a 82       	std	Y+2, r1	; 0x02
     f04:	19 82       	std	Y+1, r1	; 0x01
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <softwareDelayMs+0x28>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	2f e0       	ldi	r18, 0x0F	; 15
     f18:	80 3a       	cpi	r24, 0xA0	; 160
     f1a:	92 07       	cpc	r25, r18
     f1c:	a8 f3       	brcs	.-22     	; 0xf08 <softwareDelayMs+0x1e>
		u32_delay_in_ms--;
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	ad 81       	ldd	r26, Y+5	; 0x05
     f24:	be 81       	ldd	r27, Y+6	; 0x06
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	a1 09       	sbc	r26, r1
     f2a:	b1 09       	sbc	r27, r1
     f2c:	8b 83       	std	Y+3, r24	; 0x03
     f2e:	9c 83       	std	Y+4, r25	; 0x04
     f30:	ad 83       	std	Y+5, r26	; 0x05
     f32:	be 83       	std	Y+6, r27	; 0x06
/************************************************************************/

void softwareDelayMs(uint32 u32_delay_in_ms)
{
	/*looping for number of counts that each count is 1ms approximately*/
	while(u32_delay_in_ms > 0)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	ad 81       	ldd	r26, Y+5	; 0x05
     f3a:	be 81       	ldd	r27, Y+6	; 0x06
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	a1 05       	cpc	r26, r1
     f40:	b1 05       	cpc	r27, r1
     f42:	f9 f6       	brne	.-66     	; 0xf02 <softwareDelayMs+0x18>
	{
		for (uint16 i = 0 ; i < 4000 ; i++);
		u32_delay_in_ms--;
	}
	return;
     f44:	26 96       	adiw	r28, 0x06	; 6
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <GPIO_init>:
 * Input:	void
 * Output:  void
 * return:	void
 * prerequisites:	No prerequisites
 */
void GPIO_init(void) {
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0;		//Initialize portA pins to input
     f5e:	ea e3       	ldi	r30, 0x3A	; 58
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	10 82       	st	Z, r1
	DDRB = 0;		//Initialize portB pins to input
     f64:	e7 e3       	ldi	r30, 0x37	; 55
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	10 82       	st	Z, r1
	DDRC = 0;		//Initialize portC pins to input
     f6a:	e4 e3       	ldi	r30, 0x34	; 52
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	10 82       	st	Z, r1
	DDRD = 0;		//Initialize portD pins to input
     f70:	e1 e3       	ldi	r30, 0x31	; 49
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	10 82       	st	Z, r1

	PORTA = 0;
     f76:	eb e3       	ldi	r30, 0x3B	; 59
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	10 82       	st	Z, r1
	PORTB = 0;
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	10 82       	st	Z, r1
	PORTC = 0;
     f82:	e5 e3       	ldi	r30, 0x35	; 53
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	10 82       	st	Z, r1
	PORTD = 0;
     f88:	e2 e3       	ldi	r30, 0x32	; 50
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	10 82       	st	Z, r1

	//Enable Global Pull-up resistor's control
	CLEAR_BIT(SFIOR, PUD);
     f8e:	a0 e5       	ldi	r26, 0x50	; 80
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e0 e5       	ldi	r30, 0x50	; 80
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8b 7f       	andi	r24, 0xFB	; 251
     f9a:	8c 93       	st	X, r24
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <GPIO_setPinDirection>:
 * 			state	-Required state (INPUT, OUTPUT)
 * Output:  No output
 * return:	StdReturn	-return the API status
 * prerequisites:	GPIO module to be initialized
 */
StdReturn GPIO_setPinDirection(GPIO_port port, uint8 pin, GPIO_pinType state) {
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	2e 97       	sbiw	r28, 0x0e	; 14
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	6a 83       	std	Y+2, r22	; 0x02
     fba:	4b 83       	std	Y+3, r20	; 0x03
	//Check for input correctness
	if (pin > MAX_PIN_NUMBER) {
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	88 30       	cpi	r24, 0x08	; 8
     fc0:	18 f0       	brcs	.+6      	; 0xfc8 <GPIO_setPinDirection+0x26>
		return E_NOK;
     fc2:	21 e0       	ldi	r18, 0x01	; 1
     fc4:	2e 87       	std	Y+14, r18	; 0x0e
     fc6:	12 c1       	rjmp	.+548    	; 0x11ec <GPIO_setPinDirection+0x24a>
	} else {
		switch (port) {
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	3d 87       	std	Y+13, r19	; 0x0d
     fd0:	2c 87       	std	Y+12, r18	; 0x0c
     fd2:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd4:	9d 85       	ldd	r25, Y+13	; 0x0d
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	91 05       	cpc	r25, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <GPIO_setPinDirection+0x3c>
     fdc:	52 c0       	rjmp	.+164    	; 0x1082 <GPIO_setPinDirection+0xe0>
     fde:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe0:	3d 85       	ldd	r19, Y+13	; 0x0d
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	2c f4       	brge	.+10     	; 0xff2 <GPIO_setPinDirection+0x50>
     fe8:	8c 85       	ldd	r24, Y+12	; 0x0c
     fea:	9d 85       	ldd	r25, Y+13	; 0x0d
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	71 f0       	breq	.+28     	; 0x100c <GPIO_setPinDirection+0x6a>
     ff0:	f9 c0       	rjmp	.+498    	; 0x11e4 <GPIO_setPinDirection+0x242>
     ff2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <GPIO_setPinDirection+0x5c>
     ffc:	7d c0       	rjmp	.+250    	; 0x10f8 <GPIO_setPinDirection+0x156>
     ffe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1000:	9d 85       	ldd	r25, Y+13	; 0x0d
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <GPIO_setPinDirection+0x68>
    1008:	b2 c0       	rjmp	.+356    	; 0x116e <GPIO_setPinDirection+0x1cc>
    100a:	ec c0       	rjmp	.+472    	; 0x11e4 <GPIO_setPinDirection+0x242>
		//Controlling PORTA
		case GPIO_PORTA:
			switch (state) {
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3b 87       	std	Y+11, r19	; 0x0b
    1014:	2a 87       	std	Y+10, r18	; 0x0a
    1016:	8a 85       	ldd	r24, Y+10	; 0x0a
    1018:	9b 85       	ldd	r25, Y+11	; 0x0b
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	31 f0       	breq	.+12     	; 0x102a <GPIO_setPinDirection+0x88>
    101e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1020:	3b 85       	ldd	r19, Y+11	; 0x0b
    1022:	21 30       	cpi	r18, 0x01	; 1
    1024:	31 05       	cpc	r19, r1
    1026:	b1 f0       	breq	.+44     	; 0x1054 <GPIO_setPinDirection+0xb2>
    1028:	29 c0       	rjmp	.+82     	; 0x107c <GPIO_setPinDirection+0xda>
			case GPIO_INPUT:
				CLEAR_BIT(DDRA, pin);
    102a:	aa e3       	ldi	r26, 0x3A	; 58
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ea e3       	ldi	r30, 0x3A	; 58
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_setPinDirection+0xa6>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_setPinDirection+0xa2>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	cb c0       	rjmp	.+406    	; 0x11ea <GPIO_setPinDirection+0x248>
				break;
			case GPIO_OUTPUT:
				SET_BIT(DDRA, pin);
    1054:	aa e3       	ldi	r26, 0x3A	; 58
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ea e3       	ldi	r30, 0x3A	; 58
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <GPIO_setPinDirection+0xd0>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <GPIO_setPinDirection+0xcc>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	b7 c0       	rjmp	.+366    	; 0x11ea <GPIO_setPinDirection+0x248>
				break;
			default:
				return E_NOK;
    107c:	31 e0       	ldi	r19, 0x01	; 1
    107e:	3e 87       	std	Y+14, r19	; 0x0e
    1080:	b5 c0       	rjmp	.+362    	; 0x11ec <GPIO_setPinDirection+0x24a>
			}
			break;
		//Controlling PORTB
		case GPIO_PORTB:
			switch (state) {
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	39 87       	std	Y+9, r19	; 0x09
    108a:	28 87       	std	Y+8, r18	; 0x08
    108c:	88 85       	ldd	r24, Y+8	; 0x08
    108e:	99 85       	ldd	r25, Y+9	; 0x09
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	31 f0       	breq	.+12     	; 0x10a0 <GPIO_setPinDirection+0xfe>
    1094:	28 85       	ldd	r18, Y+8	; 0x08
    1096:	39 85       	ldd	r19, Y+9	; 0x09
    1098:	21 30       	cpi	r18, 0x01	; 1
    109a:	31 05       	cpc	r19, r1
    109c:	b1 f0       	breq	.+44     	; 0x10ca <GPIO_setPinDirection+0x128>
    109e:	29 c0       	rjmp	.+82     	; 0x10f2 <GPIO_setPinDirection+0x150>
			case GPIO_INPUT:
				CLEAR_BIT(DDRB, pin);
    10a0:	a7 e3       	ldi	r26, 0x37	; 55
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e7 e3       	ldi	r30, 0x37	; 55
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_setPinDirection+0x11c>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_setPinDirection+0x118>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	90 c0       	rjmp	.+288    	; 0x11ea <GPIO_setPinDirection+0x248>
				break;
			case GPIO_OUTPUT:
				SET_BIT(DDRB, pin);
    10ca:	a7 e3       	ldi	r26, 0x37	; 55
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e7 e3       	ldi	r30, 0x37	; 55
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_setPinDirection+0x146>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_setPinDirection+0x142>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	7c c0       	rjmp	.+248    	; 0x11ea <GPIO_setPinDirection+0x248>
				break;
			default:
				return E_NOK;
    10f2:	31 e0       	ldi	r19, 0x01	; 1
    10f4:	3e 87       	std	Y+14, r19	; 0x0e
    10f6:	7a c0       	rjmp	.+244    	; 0x11ec <GPIO_setPinDirection+0x24a>
			}
			break;
		//Controlling PORTC
		case GPIO_PORTC:
			switch (state) {
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3f 83       	std	Y+7, r19	; 0x07
    1100:	2e 83       	std	Y+6, r18	; 0x06
    1102:	8e 81       	ldd	r24, Y+6	; 0x06
    1104:	9f 81       	ldd	r25, Y+7	; 0x07
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	31 f0       	breq	.+12     	; 0x1116 <GPIO_setPinDirection+0x174>
    110a:	2e 81       	ldd	r18, Y+6	; 0x06
    110c:	3f 81       	ldd	r19, Y+7	; 0x07
    110e:	21 30       	cpi	r18, 0x01	; 1
    1110:	31 05       	cpc	r19, r1
    1112:	b1 f0       	breq	.+44     	; 0x1140 <GPIO_setPinDirection+0x19e>
    1114:	29 c0       	rjmp	.+82     	; 0x1168 <GPIO_setPinDirection+0x1c6>
			case GPIO_INPUT:
				CLEAR_BIT(DDRC, pin);
    1116:	a4 e3       	ldi	r26, 0x34	; 52
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e4 e3       	ldi	r30, 0x34	; 52
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <GPIO_setPinDirection+0x192>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <GPIO_setPinDirection+0x18e>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	55 c0       	rjmp	.+170    	; 0x11ea <GPIO_setPinDirection+0x248>
				break;
			case GPIO_OUTPUT:
				SET_BIT(DDRC, pin);
    1140:	a4 e3       	ldi	r26, 0x34	; 52
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e4 e3       	ldi	r30, 0x34	; 52
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <GPIO_setPinDirection+0x1bc>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <GPIO_setPinDirection+0x1b8>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	41 c0       	rjmp	.+130    	; 0x11ea <GPIO_setPinDirection+0x248>
				break;
			default:
				return E_NOK;
    1168:	31 e0       	ldi	r19, 0x01	; 1
    116a:	3e 87       	std	Y+14, r19	; 0x0e
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <GPIO_setPinDirection+0x24a>
			}
			break;
		//Controlling PORTD
		case GPIO_PORTD:
			switch (state) {
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3d 83       	std	Y+5, r19	; 0x05
    1176:	2c 83       	std	Y+4, r18	; 0x04
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	31 f0       	breq	.+12     	; 0x118c <GPIO_setPinDirection+0x1ea>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	21 30       	cpi	r18, 0x01	; 1
    1186:	31 05       	cpc	r19, r1
    1188:	b1 f0       	breq	.+44     	; 0x11b6 <GPIO_setPinDirection+0x214>
    118a:	29 c0       	rjmp	.+82     	; 0x11de <GPIO_setPinDirection+0x23c>
			case GPIO_INPUT:
				CLEAR_BIT(DDRD, pin);
    118c:	a1 e3       	ldi	r26, 0x31	; 49
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_setPinDirection+0x208>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_setPinDirection+0x204>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	1a c0       	rjmp	.+52     	; 0x11ea <GPIO_setPinDirection+0x248>
				break;
			case GPIO_OUTPUT:
				SET_BIT(DDRD, pin);
    11b6:	a1 e3       	ldi	r26, 0x31	; 49
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_setPinDirection+0x232>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_setPinDirection+0x22e>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <GPIO_setPinDirection+0x248>
				break;
			default:
				return E_NOK;
    11de:	31 e0       	ldi	r19, 0x01	; 1
    11e0:	3e 87       	std	Y+14, r19	; 0x0e
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <GPIO_setPinDirection+0x24a>
			}
			break;
		//Handling port name out of range
		default:
			return E_NOK;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	8e 87       	std	Y+14, r24	; 0x0e
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <GPIO_setPinDirection+0x24a>
		}
	}

	return E_OK;
    11ea:	1e 86       	std	Y+14, r1	; 0x0e
    11ec:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    11ee:	2e 96       	adiw	r28, 0x0e	; 14
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <GPIO_writePin>:
 * 			state	-Required state (High - Low)
 * Output:  No output
 * return:	StdReturn	-return the API status
 * prerequisites:	pin direction to be set OUTPUT
 */
StdReturn GPIO_writePin(GPIO_port port, uint8 pin, GPIO_pinState state) {
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	2e 97       	sbiw	r28, 0x0e	; 14
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	6a 83       	std	Y+2, r22	; 0x02
    1218:	4b 83       	std	Y+3, r20	; 0x03

	if (pin > MAX_PIN_NUMBER) {
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	88 30       	cpi	r24, 0x08	; 8
    121e:	18 f0       	brcs	.+6      	; 0x1226 <GPIO_writePin+0x26>
		return E_NOK;
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	2e 87       	std	Y+14, r18	; 0x0e
    1224:	0b c1       	rjmp	.+534    	; 0x143c <GPIO_writePin+0x23c>
	} else {
		switch (port) {
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3d 87       	std	Y+13, r19	; 0x0d
    122e:	2c 87       	std	Y+12, r18	; 0x0c
    1230:	8c 85       	ldd	r24, Y+12	; 0x0c
    1232:	9d 85       	ldd	r25, Y+13	; 0x0d
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <GPIO_writePin+0x3c>
    123a:	51 c0       	rjmp	.+162    	; 0x12de <GPIO_writePin+0xde>
    123c:	2c 85       	ldd	r18, Y+12	; 0x0c
    123e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	2c f4       	brge	.+10     	; 0x1250 <GPIO_writePin+0x50>
    1246:	8c 85       	ldd	r24, Y+12	; 0x0c
    1248:	9d 85       	ldd	r25, Y+13	; 0x0d
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	71 f0       	breq	.+28     	; 0x126a <GPIO_writePin+0x6a>
    124e:	f5 c0       	rjmp	.+490    	; 0x143a <GPIO_writePin+0x23a>
    1250:	2c 85       	ldd	r18, Y+12	; 0x0c
    1252:	3d 85       	ldd	r19, Y+13	; 0x0d
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	09 f4       	brne	.+2      	; 0x125c <GPIO_writePin+0x5c>
    125a:	7b c0       	rjmp	.+246    	; 0x1352 <GPIO_writePin+0x152>
    125c:	8c 85       	ldd	r24, Y+12	; 0x0c
    125e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <GPIO_writePin+0x68>
    1266:	af c0       	rjmp	.+350    	; 0x13c6 <GPIO_writePin+0x1c6>
    1268:	e8 c0       	rjmp	.+464    	; 0x143a <GPIO_writePin+0x23a>
		case GPIO_PORTA:
			switch (state) {
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3b 87       	std	Y+11, r19	; 0x0b
    1272:	2a 87       	std	Y+10, r18	; 0x0a
    1274:	8a 85       	ldd	r24, Y+10	; 0x0a
    1276:	9b 85       	ldd	r25, Y+11	; 0x0b
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	c9 f0       	breq	.+50     	; 0x12ae <GPIO_writePin+0xae>
    127c:	2a 85       	ldd	r18, Y+10	; 0x0a
    127e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1280:	21 30       	cpi	r18, 0x01	; 1
    1282:	31 05       	cpc	r19, r1
    1284:	49 f5       	brne	.+82     	; 0x12d8 <GPIO_writePin+0xd8>
			case GPIO_HIGH:
				SET_BIT(PORTA, pin);
    1286:	ab e3       	ldi	r26, 0x3B	; 59
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	eb e3       	ldi	r30, 0x3B	; 59
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_writePin+0xa4>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_writePin+0xa0>
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	c6 c0       	rjmp	.+396    	; 0x143a <GPIO_writePin+0x23a>
				break;
			case GPIO_LOW:
				CLEAR_BIT(PORTA, pin);
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_writePin+0xcc>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_writePin+0xc8>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	b1 c0       	rjmp	.+354    	; 0x143a <GPIO_writePin+0x23a>
				break;
			default:
				return E_NOK;
    12d8:	31 e0       	ldi	r19, 0x01	; 1
    12da:	3e 87       	std	Y+14, r19	; 0x0e
    12dc:	af c0       	rjmp	.+350    	; 0x143c <GPIO_writePin+0x23c>
			}
			break;

		case GPIO_PORTB:
			switch (state) {
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	39 87       	std	Y+9, r19	; 0x09
    12e6:	28 87       	std	Y+8, r18	; 0x08
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	99 85       	ldd	r25, Y+9	; 0x09
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	c9 f0       	breq	.+50     	; 0x1322 <GPIO_writePin+0x122>
    12f0:	28 85       	ldd	r18, Y+8	; 0x08
    12f2:	39 85       	ldd	r19, Y+9	; 0x09
    12f4:	21 30       	cpi	r18, 0x01	; 1
    12f6:	31 05       	cpc	r19, r1
    12f8:	49 f5       	brne	.+82     	; 0x134c <GPIO_writePin+0x14c>
			case GPIO_HIGH:
				SET_BIT(PORTB, pin);
    12fa:	a8 e3       	ldi	r26, 0x38	; 56
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_writePin+0x118>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_writePin+0x114>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	8c c0       	rjmp	.+280    	; 0x143a <GPIO_writePin+0x23a>
				break;
			case GPIO_LOW:
				CLEAR_BIT(PORTB, pin);
    1322:	a8 e3       	ldi	r26, 0x38	; 56
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e8 e3       	ldi	r30, 0x38	; 56
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <GPIO_writePin+0x140>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <GPIO_writePin+0x13c>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	77 c0       	rjmp	.+238    	; 0x143a <GPIO_writePin+0x23a>
				break;
			default:
				return E_NOK;
    134c:	31 e0       	ldi	r19, 0x01	; 1
    134e:	3e 87       	std	Y+14, r19	; 0x0e
    1350:	75 c0       	rjmp	.+234    	; 0x143c <GPIO_writePin+0x23c>
			}
			break;

		case GPIO_PORTC:
			switch (state) {
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3f 83       	std	Y+7, r19	; 0x07
    135a:	2e 83       	std	Y+6, r18	; 0x06
    135c:	8e 81       	ldd	r24, Y+6	; 0x06
    135e:	9f 81       	ldd	r25, Y+7	; 0x07
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	c9 f0       	breq	.+50     	; 0x1396 <GPIO_writePin+0x196>
    1364:	2e 81       	ldd	r18, Y+6	; 0x06
    1366:	3f 81       	ldd	r19, Y+7	; 0x07
    1368:	21 30       	cpi	r18, 0x01	; 1
    136a:	31 05       	cpc	r19, r1
    136c:	49 f5       	brne	.+82     	; 0x13c0 <GPIO_writePin+0x1c0>
			case GPIO_HIGH:
				SET_BIT(PORTC, pin);
    136e:	a5 e3       	ldi	r26, 0x35	; 53
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e3       	ldi	r30, 0x35	; 53
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <GPIO_writePin+0x18c>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <GPIO_writePin+0x188>
    1390:	84 2b       	or	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	52 c0       	rjmp	.+164    	; 0x143a <GPIO_writePin+0x23a>
				break;
			case GPIO_LOW:
				CLEAR_BIT(PORTC, pin);
    1396:	a5 e3       	ldi	r26, 0x35	; 53
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e5 e3       	ldi	r30, 0x35	; 53
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <GPIO_writePin+0x1b4>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <GPIO_writePin+0x1b0>
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	3d c0       	rjmp	.+122    	; 0x143a <GPIO_writePin+0x23a>
				break;
			default:
				return E_NOK;
    13c0:	31 e0       	ldi	r19, 0x01	; 1
    13c2:	3e 87       	std	Y+14, r19	; 0x0e
    13c4:	3b c0       	rjmp	.+118    	; 0x143c <GPIO_writePin+0x23c>
			}
			break;
		case GPIO_PORTD:
			switch (state) {
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	c9 f0       	breq	.+50     	; 0x140a <GPIO_writePin+0x20a>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	21 30       	cpi	r18, 0x01	; 1
    13de:	31 05       	cpc	r19, r1
    13e0:	49 f5       	brne	.+82     	; 0x1434 <GPIO_writePin+0x234>
			case GPIO_HIGH:
				SET_BIT(PORTD, pin);
    13e2:	a2 e3       	ldi	r26, 0x32	; 50
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <GPIO_writePin+0x200>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <GPIO_writePin+0x1fc>
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	18 c0       	rjmp	.+48     	; 0x143a <GPIO_writePin+0x23a>
				break;
			case GPIO_LOW:
				CLEAR_BIT(PORTD, pin);
    140a:	a2 e3       	ldi	r26, 0x32	; 50
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e2 e3       	ldi	r30, 0x32	; 50
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <GPIO_writePin+0x228>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <GPIO_writePin+0x224>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	03 c0       	rjmp	.+6      	; 0x143a <GPIO_writePin+0x23a>
				break;
			default:
				return E_NOK;
    1434:	31 e0       	ldi	r19, 0x01	; 1
    1436:	3e 87       	std	Y+14, r19	; 0x0e
    1438:	01 c0       	rjmp	.+2      	; 0x143c <GPIO_writePin+0x23c>
			break;

		}
	}

	return E_OK;
    143a:	1e 86       	std	Y+14, r1	; 0x0e
    143c:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    143e:	2e 96       	adiw	r28, 0x0e	; 14
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <GPIO_togglePin>:
 * 			pin		-Pin number
 * Output:  No output
 * return:	StdReturn	-return the API status
 * prerequisites:	pin direction to be set output
 */
StdReturn GPIO_togglePin(GPIO_port port, uint8 pin) {
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <GPIO_togglePin+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <GPIO_togglePin+0x8>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > MAX_PIN_NUMBER) {
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	88 30       	cpi	r24, 0x08	; 8
    1466:	18 f0       	brcs	.+6      	; 0x146e <GPIO_togglePin+0x1e>
		return E_NOK;
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	2d 83       	std	Y+5, r18	; 0x05
    146c:	73 c0       	rjmp	.+230    	; 0x1554 <GPIO_togglePin+0x104>
	} else {
		switch (port) {
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3c 83       	std	Y+4, r19	; 0x04
    1476:	2b 83       	std	Y+3, r18	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	49 f1       	breq	.+82     	; 0x14d4 <GPIO_togglePin+0x84>
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <GPIO_togglePin+0x46>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	61 f0       	breq	.+24     	; 0x14ac <GPIO_togglePin+0x5c>
    1494:	5b c0       	rjmp	.+182    	; 0x154c <GPIO_togglePin+0xfc>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	71 f1       	breq	.+92     	; 0x14fc <GPIO_togglePin+0xac>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	e9 f1       	breq	.+122    	; 0x1524 <GPIO_togglePin+0xd4>
    14aa:	50 c0       	rjmp	.+160    	; 0x154c <GPIO_togglePin+0xfc>
		case GPIO_PORTA:
			TOGGLE_BIT(PORTA, pin);
    14ac:	ab e3       	ldi	r26, 0x3B	; 59
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	eb e3       	ldi	r30, 0x3B	; 59
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_togglePin+0x7a>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_togglePin+0x76>
    14ce:	84 27       	eor	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <GPIO_togglePin+0x102>
			break;
		case GPIO_PORTB:
			TOGGLE_BIT(PORTB, pin);
    14d4:	a8 e3       	ldi	r26, 0x38	; 56
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e8 e3       	ldi	r30, 0x38	; 56
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_togglePin+0xa2>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_togglePin+0x9e>
    14f6:	84 27       	eor	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	2b c0       	rjmp	.+86     	; 0x1552 <GPIO_togglePin+0x102>
			break;
		case GPIO_PORTC:
			TOGGLE_BIT(PORTC, pin);
    14fc:	a5 e3       	ldi	r26, 0x35	; 53
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e5 e3       	ldi	r30, 0x35	; 53
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 2e       	mov	r0, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <GPIO_togglePin+0xca>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	0a 94       	dec	r0
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <GPIO_togglePin+0xc6>
    151e:	84 27       	eor	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	17 c0       	rjmp	.+46     	; 0x1552 <GPIO_togglePin+0x102>
			break;
		case GPIO_PORTD:
			TOGGLE_BIT(PORTD, pin);
    1524:	a2 e3       	ldi	r26, 0x32	; 50
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <GPIO_togglePin+0xf2>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <GPIO_togglePin+0xee>
    1546:	84 27       	eor	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <GPIO_togglePin+0x102>
			break;
		default:
			return E_NOK;
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	9d 83       	std	Y+5, r25	; 0x05
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <GPIO_togglePin+0x104>
		}
	}
	

	return E_OK;
    1552:	1d 82       	std	Y+5, r1	; 0x05
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <GPIO_readPin>:
 * 			pin		-Pin number
 * Output:  *state	-Pin state whether high or low
 * return:	StdReturn	-return the API status
 * prerequisites:	pin direction to be set INPUT
 */
StdReturn GPIO_readPin(GPIO_port port, uint8 pin, GPIO_pinState *state) {
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	27 97       	sbiw	r28, 0x07	; 7
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	6a 83       	std	Y+2, r22	; 0x02
    157e:	5c 83       	std	Y+4, r21	; 0x04
    1580:	4b 83       	std	Y+3, r20	; 0x03

	if (pin > MAX_PIN_NUMBER) {
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	88 30       	cpi	r24, 0x08	; 8
    1586:	18 f0       	brcs	.+6      	; 0x158e <GPIO_readPin+0x28>
		return E_NOK;
    1588:	21 e0       	ldi	r18, 0x01	; 1
    158a:	2f 83       	std	Y+7, r18	; 0x07
    158c:	71 c0       	rjmp	.+226    	; 0x1670 <GPIO_readPin+0x10a>
	} else {
		switch (port) {
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	48 2f       	mov	r20, r24
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	5e 83       	std	Y+6, r21	; 0x06
    1596:	4d 83       	std	Y+5, r20	; 0x05
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	59 f1       	breq	.+86     	; 0x15f8 <GPIO_readPin+0x92>
    15a2:	2d 81       	ldd	r18, Y+5	; 0x05
    15a4:	3e 81       	ldd	r19, Y+6	; 0x06
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	34 f4       	brge	.+12     	; 0x15b8 <GPIO_readPin+0x52>
    15ac:	4d 81       	ldd	r20, Y+5	; 0x05
    15ae:	5e 81       	ldd	r21, Y+6	; 0x06
    15b0:	41 15       	cp	r20, r1
    15b2:	51 05       	cpc	r21, r1
    15b4:	69 f0       	breq	.+26     	; 0x15d0 <GPIO_readPin+0x6a>
    15b6:	5b c0       	rjmp	.+182    	; 0x166e <GPIO_readPin+0x108>
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	91 05       	cpc	r25, r1
    15c0:	79 f1       	breq	.+94     	; 0x1620 <GPIO_readPin+0xba>
    15c2:	2d 81       	ldd	r18, Y+5	; 0x05
    15c4:	3e 81       	ldd	r19, Y+6	; 0x06
    15c6:	23 30       	cpi	r18, 0x03	; 3
    15c8:	31 05       	cpc	r19, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <GPIO_readPin+0x68>
    15cc:	3d c0       	rjmp	.+122    	; 0x1648 <GPIO_readPin+0xe2>
    15ce:	4f c0       	rjmp	.+158    	; 0x166e <GPIO_readPin+0x108>
		case GPIO_PORTA:
			*state = READ_BIT(PINA, pin);
    15d0:	e9 e3       	ldi	r30, 0x39	; 57
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a9 01       	movw	r20, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <GPIO_readPin+0x82>
    15e4:	55 95       	asr	r21
    15e6:	47 95       	ror	r20
    15e8:	8a 95       	dec	r24
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <GPIO_readPin+0x7e>
    15ec:	ca 01       	movw	r24, r20
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	eb 81       	ldd	r30, Y+3	; 0x03
    15f2:	fc 81       	ldd	r31, Y+4	; 0x04
    15f4:	80 83       	st	Z, r24
    15f6:	3b c0       	rjmp	.+118    	; 0x166e <GPIO_readPin+0x108>
			break;
		case GPIO_PORTB:
			*state = READ_BIT(PINB, pin);
    15f8:	e6 e3       	ldi	r30, 0x36	; 54
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_readPin+0xaa>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_readPin+0xa6>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	eb 81       	ldd	r30, Y+3	; 0x03
    161a:	fc 81       	ldd	r31, Y+4	; 0x04
    161c:	80 83       	st	Z, r24
    161e:	27 c0       	rjmp	.+78     	; 0x166e <GPIO_readPin+0x108>
			break;
		case GPIO_PORTC:
			*state = READ_BIT(PINC, pin);
    1620:	e3 e3       	ldi	r30, 0x33	; 51
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a9 01       	movw	r20, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_readPin+0xd2>
    1634:	55 95       	asr	r21
    1636:	47 95       	ror	r20
    1638:	8a 95       	dec	r24
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_readPin+0xce>
    163c:	ca 01       	movw	r24, r20
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	80 83       	st	Z, r24
    1646:	13 c0       	rjmp	.+38     	; 0x166e <GPIO_readPin+0x108>
			break;
		case GPIO_PORTD:
			*state = READ_BIT(PIND, pin);
    1648:	e0 e3       	ldi	r30, 0x30	; 48
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a9 01       	movw	r20, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <GPIO_readPin+0xfa>
    165c:	55 95       	asr	r21
    165e:	47 95       	ror	r20
    1660:	8a 95       	dec	r24
    1662:	e2 f7       	brpl	.-8      	; 0x165c <GPIO_readPin+0xf6>
    1664:	ca 01       	movw	r24, r20
    1666:	81 70       	andi	r24, 0x01	; 1
    1668:	eb 81       	ldd	r30, Y+3	; 0x03
    166a:	fc 81       	ldd	r31, Y+4	; 0x04
    166c:	80 83       	st	Z, r24
			break;
		}
	}

	return E_OK;
    166e:	1f 82       	std	Y+7, r1	; 0x07
    1670:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1672:	27 96       	adiw	r28, 0x07	; 7
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <GPIO_enablePullup>:
 * 			state	-Required state (enabled - Disabled)
 * Output:  No output
 * return:	StdReturn	-return the API status
 * prerequisites:	pin direction to be set INPUT
 */
StdReturn GPIO_enablePullup(GPIO_port port, uint8 pin, GPIO_pullupEnable state) {
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	2e 97       	sbiw	r28, 0x0e	; 14
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	6a 83       	std	Y+2, r22	; 0x02
    169c:	4b 83       	std	Y+3, r20	; 0x03

	if (pin > MAX_PIN_NUMBER) {
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	88 30       	cpi	r24, 0x08	; 8
    16a2:	18 f0       	brcs	.+6      	; 0x16aa <GPIO_enablePullup+0x26>
		return E_NOK;
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    16a6:	2e 87       	std	Y+14, r18	; 0x0e
    16a8:	06 c1       	rjmp	.+524    	; 0x18b6 <GPIO_enablePullup+0x232>
	} else {
		switch (port) {
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	3d 87       	std	Y+13, r19	; 0x0d
    16b2:	2c 87       	std	Y+12, r18	; 0x0c
    16b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    16b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <GPIO_enablePullup+0x3c>
    16be:	4f c0       	rjmp	.+158    	; 0x175e <GPIO_enablePullup+0xda>
    16c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <GPIO_enablePullup+0x50>
    16ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    16cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	71 f0       	breq	.+28     	; 0x16ee <GPIO_enablePullup+0x6a>
    16d2:	ed c0       	rjmp	.+474    	; 0x18ae <GPIO_enablePullup+0x22a>
    16d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <GPIO_enablePullup+0x5c>
    16de:	77 c0       	rjmp	.+238    	; 0x17ce <GPIO_enablePullup+0x14a>
    16e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    16e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <GPIO_enablePullup+0x68>
    16ea:	a9 c0       	rjmp	.+338    	; 0x183e <GPIO_enablePullup+0x1ba>
    16ec:	e0 c0       	rjmp	.+448    	; 0x18ae <GPIO_enablePullup+0x22a>
		case GPIO_PORTA:
			switch (state) {
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3b 87       	std	Y+11, r19	; 0x0b
    16f6:	2a 87       	std	Y+10, r18	; 0x0a
    16f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	31 f0       	breq	.+12     	; 0x170c <GPIO_enablePullup+0x88>
    1700:	2a 85       	ldd	r18, Y+10	; 0x0a
    1702:	3b 85       	ldd	r19, Y+11	; 0x0b
    1704:	21 30       	cpi	r18, 0x01	; 1
    1706:	31 05       	cpc	r19, r1
    1708:	b1 f0       	breq	.+44     	; 0x1736 <GPIO_enablePullup+0xb2>
    170a:	d4 c0       	rjmp	.+424    	; 0x18b4 <GPIO_enablePullup+0x230>
			case GPIO_PULLUP_DISABLE:
				CLEAR_BIT(PORTA, pin);
    170c:	ab e3       	ldi	r26, 0x3B	; 59
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	eb e3       	ldi	r30, 0x3B	; 59
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <GPIO_enablePullup+0xa6>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <GPIO_enablePullup+0xa2>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	bf c0       	rjmp	.+382    	; 0x18b4 <GPIO_enablePullup+0x230>
				break;
			case GPIO_PULLUP_ENABLE:
				SET_BIT(PORTA, pin);
    1736:	ab e3       	ldi	r26, 0x3B	; 59
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	eb e3       	ldi	r30, 0x3B	; 59
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <GPIO_enablePullup+0xd0>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <GPIO_enablePullup+0xcc>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	ab c0       	rjmp	.+342    	; 0x18b4 <GPIO_enablePullup+0x230>
				break;
			}
			break;
		case GPIO_PORTB:
			switch (state) {
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	39 87       	std	Y+9, r19	; 0x09
    1766:	28 87       	std	Y+8, r18	; 0x08
    1768:	88 85       	ldd	r24, Y+8	; 0x08
    176a:	99 85       	ldd	r25, Y+9	; 0x09
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	31 f0       	breq	.+12     	; 0x177c <GPIO_enablePullup+0xf8>
    1770:	28 85       	ldd	r18, Y+8	; 0x08
    1772:	39 85       	ldd	r19, Y+9	; 0x09
    1774:	21 30       	cpi	r18, 0x01	; 1
    1776:	31 05       	cpc	r19, r1
    1778:	b1 f0       	breq	.+44     	; 0x17a6 <GPIO_enablePullup+0x122>
    177a:	9c c0       	rjmp	.+312    	; 0x18b4 <GPIO_enablePullup+0x230>
			case GPIO_PULLUP_DISABLE:
				CLEAR_BIT(PORTB, pin);
    177c:	a8 e3       	ldi	r26, 0x38	; 56
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e8 e3       	ldi	r30, 0x38	; 56
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GPIO_enablePullup+0x116>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <GPIO_enablePullup+0x112>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	87 c0       	rjmp	.+270    	; 0x18b4 <GPIO_enablePullup+0x230>
				break;
			case GPIO_PULLUP_ENABLE:
				SET_BIT(PORTB, pin);
    17a6:	a8 e3       	ldi	r26, 0x38	; 56
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <GPIO_enablePullup+0x140>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <GPIO_enablePullup+0x13c>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	73 c0       	rjmp	.+230    	; 0x18b4 <GPIO_enablePullup+0x230>
				break;
			}
			break;
		case GPIO_PORTC:
			switch (state) {
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3f 83       	std	Y+7, r19	; 0x07
    17d6:	2e 83       	std	Y+6, r18	; 0x06
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	31 f0       	breq	.+12     	; 0x17ec <GPIO_enablePullup+0x168>
    17e0:	2e 81       	ldd	r18, Y+6	; 0x06
    17e2:	3f 81       	ldd	r19, Y+7	; 0x07
    17e4:	21 30       	cpi	r18, 0x01	; 1
    17e6:	31 05       	cpc	r19, r1
    17e8:	b1 f0       	breq	.+44     	; 0x1816 <GPIO_enablePullup+0x192>
    17ea:	64 c0       	rjmp	.+200    	; 0x18b4 <GPIO_enablePullup+0x230>
			case GPIO_PULLUP_DISABLE:
				CLEAR_BIT(PORTC, pin);
    17ec:	a5 e3       	ldi	r26, 0x35	; 53
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e3       	ldi	r30, 0x35	; 53
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_enablePullup+0x186>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_enablePullup+0x182>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	4f c0       	rjmp	.+158    	; 0x18b4 <GPIO_enablePullup+0x230>
				break;
			case GPIO_PULLUP_ENABLE:
				SET_BIT(PORTC, pin);
    1816:	a5 e3       	ldi	r26, 0x35	; 53
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e3       	ldi	r30, 0x35	; 53
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <GPIO_enablePullup+0x1b0>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <GPIO_enablePullup+0x1ac>
    1838:	84 2b       	or	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	3b c0       	rjmp	.+118    	; 0x18b4 <GPIO_enablePullup+0x230>
				break;
			}
			break;
		case GPIO_PORTD:
			switch (state) {
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3d 83       	std	Y+5, r19	; 0x05
    1846:	2c 83       	std	Y+4, r18	; 0x04
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	9d 81       	ldd	r25, Y+5	; 0x05
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	31 f0       	breq	.+12     	; 0x185c <GPIO_enablePullup+0x1d8>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	21 30       	cpi	r18, 0x01	; 1
    1856:	31 05       	cpc	r19, r1
    1858:	b1 f0       	breq	.+44     	; 0x1886 <GPIO_enablePullup+0x202>
    185a:	2c c0       	rjmp	.+88     	; 0x18b4 <GPIO_enablePullup+0x230>
			case GPIO_PULLUP_DISABLE:
				CLEAR_BIT(PORTD, pin);
    185c:	a2 e3       	ldi	r26, 0x32	; 50
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e2 e3       	ldi	r30, 0x32	; 50
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <GPIO_enablePullup+0x1f6>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <GPIO_enablePullup+0x1f2>
    187e:	80 95       	com	r24
    1880:	84 23       	and	r24, r20
    1882:	8c 93       	st	X, r24
    1884:	17 c0       	rjmp	.+46     	; 0x18b4 <GPIO_enablePullup+0x230>
				break;
			case GPIO_PULLUP_ENABLE:
				SET_BIT(PORTD, pin);
    1886:	a2 e3       	ldi	r26, 0x32	; 50
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e2 e3       	ldi	r30, 0x32	; 50
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <GPIO_enablePullup+0x220>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <GPIO_enablePullup+0x21c>
    18a8:	84 2b       	or	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <GPIO_enablePullup+0x230>
				break;
			}
			break;

		default:
			return E_NOK;
    18ae:	31 e0       	ldi	r19, 0x01	; 1
    18b0:	3e 87       	std	Y+14, r19	; 0x0e
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <GPIO_enablePullup+0x232>
		}
	}

	return E_OK;
    18b4:	1e 86       	std	Y+14, r1	; 0x0e
    18b6:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    18b8:	2e 96       	adiw	r28, 0x0e	; 14
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <__vector_1>:

/***************************************************************
 ***************Functions implementation section****************
 **************************************************************/
//ISR for the external interrupt 0
ISR( INT0_vect) {
    18ca:	1f 92       	push	r1
    18cc:	0f 92       	push	r0
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	0f 92       	push	r0
    18d2:	11 24       	eor	r1, r1
    18d4:	2f 93       	push	r18
    18d6:	3f 93       	push	r19
    18d8:	4f 93       	push	r20
    18da:	5f 93       	push	r21
    18dc:	6f 93       	push	r22
    18de:	7f 93       	push	r23
    18e0:	8f 93       	push	r24
    18e2:	9f 93       	push	r25
    18e4:	af 93       	push	r26
    18e6:	bf 93       	push	r27
    18e8:	ef 93       	push	r30
    18ea:	ff 93       	push	r31
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
	(*user_func0)();
    18f4:	e0 91 92 01 	lds	r30, 0x0192
    18f8:	f0 91 93 01 	lds	r31, 0x0193
    18fc:	09 95       	icall
}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	bf 91       	pop	r27
    1908:	af 91       	pop	r26
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	7f 91       	pop	r23
    1910:	6f 91       	pop	r22
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__vector_2>:

//ISR for the external interrupt 1
ISR( INT1_vect) {
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	4f 93       	push	r20
    1934:	5f 93       	push	r21
    1936:	6f 93       	push	r22
    1938:	7f 93       	push	r23
    193a:	8f 93       	push	r24
    193c:	9f 93       	push	r25
    193e:	af 93       	push	r26
    1940:	bf 93       	push	r27
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
	(*user_func1)();
    194e:	e0 91 94 01 	lds	r30, 0x0194
    1952:	f0 91 95 01 	lds	r31, 0x0195
    1956:	09 95       	icall
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	0f 90       	pop	r0
    197a:	1f 90       	pop	r1
    197c:	18 95       	reti

0000197e <__vector_18>:

//ISR for the external interrupt 2
ISR( INT2_vect) {
    197e:	1f 92       	push	r1
    1980:	0f 92       	push	r0
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	0f 92       	push	r0
    1986:	11 24       	eor	r1, r1
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	(*user_func2)();
    19a8:	e0 91 96 01 	lds	r30, 0x0196
    19ac:	f0 91 97 01 	lds	r31, 0x0197
    19b0:	09 95       	icall
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	ff 91       	pop	r31
    19b8:	ef 91       	pop	r30
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <extInt0_init>:

//Initialize external interrupt 0
StdReturn extInt0_init(extInt_senseControl senseLevel) {
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <extInt0_init+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <extInt0_init+0x8>
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	8a 83       	std	Y+2, r24	; 0x02
	StdReturn return_Loc = E_OK;
    19e6:	19 82       	std	Y+1, r1	; 0x01

	//Enable external interrupt 0 mask
	SET_BIT(GICR, INT0);
    19e8:	ab e5       	ldi	r26, 0x5B	; 91
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	eb e5       	ldi	r30, 0x5B	; 91
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	80 64       	ori	r24, 0x40	; 64
    19f4:	8c 93       	st	X, r24
  
	//Configure sense control
	switch (senseLevel) {
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	3c 83       	std	Y+4, r19	; 0x04
    19fe:	2b 83       	std	Y+3, r18	; 0x03
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	31 f0       	breq	.+12     	; 0x1a14 <extInt0_init+0x3c>
    1a08:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0c:	21 30       	cpi	r18, 0x01	; 1
    1a0e:	31 05       	cpc	r19, r1
    1a10:	81 f0       	breq	.+32     	; 0x1a32 <extInt0_init+0x5a>
    1a12:	1e c0       	rjmp	.+60     	; 0x1a50 <extInt0_init+0x78>
	case EXTINT_RISING_EDGE:		//Rising edge causes interrupt
		SET_BIT(MCUCR, ISC01);
    1a14:	a5 e5       	ldi	r26, 0x55	; 85
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e5 e5       	ldi	r30, 0x55	; 85
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	8c 93       	st	X, r24
		SET_BIT(MCUCR, ISC00);
    1a22:	a5 e5       	ldi	r26, 0x55	; 85
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e5       	ldi	r30, 0x55	; 85
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	81 60       	ori	r24, 0x01	; 1
    1a2e:	8c 93       	st	X, r24
    1a30:	11 c0       	rjmp	.+34     	; 0x1a54 <extInt0_init+0x7c>
		break;
	case EXTINT_FALLING_EDGE:		//Falling edge causes interrupt
		SET_BIT(MCUCR, ISC01);
    1a32:	a5 e5       	ldi	r26, 0x55	; 85
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e5 e5       	ldi	r30, 0x55	; 85
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 60       	ori	r24, 0x02	; 2
    1a3e:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, ISC00);
    1a40:	a5 e5       	ldi	r26, 0x55	; 85
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e5       	ldi	r30, 0x55	; 85
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8e 7f       	andi	r24, 0xFE	; 254
    1a4c:	8c 93       	st	X, r24
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <extInt0_init+0x7c>
		break;
	default:						//Wrong configuration is sent
		return_Loc = E_NOK;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	//Return API status
	return return_Loc;
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <extInt0_callback>:

//Set the user function to be executed on ISR
StdReturn extInt0_callback(void (*func_ptr)(void)) {
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <extInt0_callback+0x6>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
	user_func0 = func_ptr;
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	90 93 93 01 	sts	0x0193, r25
    1a7a:	80 93 92 01 	sts	0x0192, r24
	return E_OK;
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <extInt1_init>:

//Initialize external interrupt 1
StdReturn extInt1_init(extInt_senseControl senseLevel) {
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <extInt1_init+0x6>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <extInt1_init+0x8>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	8a 83       	std	Y+2, r24	; 0x02
	StdReturn return_Loc = E_OK;
    1a98:	19 82       	std	Y+1, r1	; 0x01

	//Enable external interrupt 1 mask
	SET_BIT(GICR, INT1);
    1a9a:	ab e5       	ldi	r26, 0x5B	; 91
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	eb e5       	ldi	r30, 0x5B	; 91
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	80 68       	ori	r24, 0x80	; 128
    1aa6:	8c 93       	st	X, r24

	//Configure sense control
	switch (senseLevel) {
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	3c 83       	std	Y+4, r19	; 0x04
    1ab0:	2b 83       	std	Y+3, r18	; 0x03
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <extInt1_init+0x3c>
    1aba:	2b 81       	ldd	r18, Y+3	; 0x03
    1abc:	3c 81       	ldd	r19, Y+4	; 0x04
    1abe:	21 30       	cpi	r18, 0x01	; 1
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <extInt1_init+0x5a>
    1ac4:	1e c0       	rjmp	.+60     	; 0x1b02 <extInt1_init+0x78>
	case EXTINT_RISING_EDGE:
		SET_BIT(MCUCR, ISC11);
    1ac6:	a5 e5       	ldi	r26, 0x55	; 85
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e5 e5       	ldi	r30, 0x55	; 85
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 60       	ori	r24, 0x08	; 8
    1ad2:	8c 93       	st	X, r24
		SET_BIT(MCUCR, ISC10);
    1ad4:	a5 e5       	ldi	r26, 0x55	; 85
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e5       	ldi	r30, 0x55	; 85
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	84 60       	ori	r24, 0x04	; 4
    1ae0:	8c 93       	st	X, r24
    1ae2:	11 c0       	rjmp	.+34     	; 0x1b06 <extInt1_init+0x7c>
		break;
	case EXTINT_FALLING_EDGE:
		SET_BIT(MCUCR, ISC11);
    1ae4:	a5 e5       	ldi	r26, 0x55	; 85
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e5       	ldi	r30, 0x55	; 85
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 60       	ori	r24, 0x08	; 8
    1af0:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, ISC10);
    1af2:	a5 e5       	ldi	r26, 0x55	; 85
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e5 e5       	ldi	r30, 0x55	; 85
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8b 7f       	andi	r24, 0xFB	; 251
    1afe:	8c 93       	st	X, r24
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <extInt1_init+0x7c>
		break;
	default:
		return_Loc = E_NOK;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return return_Loc;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <extInt1_callback>:

//Set the user function to be executed on ISR
StdReturn extInt1_callback(void (*func_ptr)(void)) {
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <extInt1_callback+0x6>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
	user_func1 = func_ptr;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	90 93 95 01 	sts	0x0195, r25
    1b2c:	80 93 94 01 	sts	0x0194, r24
	return E_OK;
    1b30:	80 e0       	ldi	r24, 0x00	; 0
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <extInt2_init>:

//Initialize external interrupt 2
StdReturn extInt2_init(extInt_senseControl senseLevel) {
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <extInt2_init+0x6>
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <extInt2_init+0x8>
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	8a 83       	std	Y+2, r24	; 0x02
	StdReturn return_Loc = E_OK;
    1b4a:	19 82       	std	Y+1, r1	; 0x01

	//Enable external interrupt 2 mask
	SET_BIT(GICR, INT2);
    1b4c:	ab e5       	ldi	r26, 0x5B	; 91
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	eb e5       	ldi	r30, 0x5B	; 91
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 62       	ori	r24, 0x20	; 32
    1b58:	8c 93       	st	X, r24

	//Configure sense control
	switch (senseLevel) {
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3c 83       	std	Y+4, r19	; 0x04
    1b62:	2b 83       	std	Y+3, r18	; 0x03
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	31 f0       	breq	.+12     	; 0x1b78 <extInt2_init+0x3c>
    1b6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b70:	21 30       	cpi	r18, 0x01	; 1
    1b72:	31 05       	cpc	r19, r1
    1b74:	49 f0       	breq	.+18     	; 0x1b88 <extInt2_init+0x4c>
    1b76:	10 c0       	rjmp	.+32     	; 0x1b98 <extInt2_init+0x5c>
	case EXTINT_RISING_EDGE:
		SET_BIT(MCUCSR, ISC2);
    1b78:	a4 e5       	ldi	r26, 0x54	; 84
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e4 e5       	ldi	r30, 0x54	; 84
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	8c 93       	st	X, r24
    1b86:	0a c0       	rjmp	.+20     	; 0x1b9c <extInt2_init+0x60>
		break;
	case EXTINT_FALLING_EDGE:
		CLEAR_BIT(MCUCSR, ISC2);
    1b88:	a4 e5       	ldi	r26, 0x54	; 84
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e4 e5       	ldi	r30, 0x54	; 84
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8f 7b       	andi	r24, 0xBF	; 191
    1b94:	8c 93       	st	X, r24
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <extInt2_init+0x60>
		break;
	default:
		return_Loc = E_NOK;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return return_Loc;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <extInt2_callback>:

//Set the user function to be executed on ISR
StdReturn extInt2_callback(void (*func_ptr)(void)) {
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <extInt2_callback+0x6>
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
	user_func2 = func_ptr;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	90 93 97 01 	sts	0x0197, r25
    1bc2:	80 93 96 01 	sts	0x0196, r24
	return E_OK;
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <ADC_init>:

/***************************************************************
 ***************Functions implementation section****************
 **************************************************************/
//Initialize the ADC module
void ADC_init(void) {
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
	//Select Vref
#if defined(AREF_EXTERNAL_AVCC)
	CLEAR_BIT(ADMUX, REFS1);
    1bda:	a7 e2       	ldi	r26, 0x27	; 39
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e7 e2       	ldi	r30, 0x27	; 39
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 77       	andi	r24, 0x7F	; 127
    1be6:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
    1be8:	a7 e2       	ldi	r26, 0x27	; 39
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e7 e2       	ldi	r30, 0x27	; 39
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	80 64       	ori	r24, 0x40	; 64
    1bf4:	8c 93       	st	X, r24
	//Left adjust for 8 bit ADC resolution otherwise right adjust
#if defined(RESOLUTION_8_BIT)
	SET_BIT(ADMUX, ADLAR);
#endif
	//Enable ADC
	SET_BIT(ADCSRA, ADEN);
    1bf6:	a6 e2       	ldi	r26, 0x26	; 38
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e6 e2       	ldi	r30, 0x26	; 38
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 68       	ori	r24, 0x80	; 128
    1c02:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS0);
	SET_BIT(ADCSRA, ADPS1);
#elif defined(PRESCALER_16)
	SET_BIT(ADCSRA, ADPS2);
#elif defined(PRESCALER_32)
	SET_BIT(ADCSRA, ADPS0);
    1c04:	a6 e2       	ldi	r26, 0x26	; 38
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e6 e2       	ldi	r30, 0x26	; 38
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	81 60       	ori	r24, 0x01	; 1
    1c10:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
    1c12:	a6 e2       	ldi	r26, 0x26	; 38
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e6 e2       	ldi	r30, 0x26	; 38
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	84 60       	ori	r24, 0x04	; 4
    1c1e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
	SET_BIT(ADCSRA, ADPS1);
#elif defined(PRESCALER_128)
#endif

}
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <ADC_setInterrupt>:

//Enables/Disables the interrupt for the ADC
StdReturn ADC_setInterrupt(ADC_enuInterruptState state) {
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <ADC_setInterrupt+0x6>
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <ADC_setInterrupt+0x8>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3c 83       	std	Y+4, r19	; 0x04
    1c3c:	2b 83       	std	Y+3, r18	; 0x03
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	31 f0       	breq	.+12     	; 0x1c52 <ADC_setInterrupt+0x2c>
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	21 30       	cpi	r18, 0x01	; 1
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	49 f0       	breq	.+18     	; 0x1c62 <ADC_setInterrupt+0x3c>
    1c50:	10 c0       	rjmp	.+32     	; 0x1c72 <ADC_setInterrupt+0x4c>
	case ADC_INTERRUPT_ENABLE:
		//Enable ADC interrupt
		SET_BIT(ADCSRA, ADIE);
    1c52:	a6 e2       	ldi	r26, 0x26	; 38
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e6 e2       	ldi	r30, 0x26	; 38
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 60       	ori	r24, 0x08	; 8
    1c5e:	8c 93       	st	X, r24
    1c60:	0b c0       	rjmp	.+22     	; 0x1c78 <ADC_setInterrupt+0x52>
		break;
	case ADC_INTERRUPT_DISABLE:
		//Disable ADC interrupt
		CLEAR_BIT(ADCSRA, ADIE);
    1c62:	a6 e2       	ldi	r26, 0x26	; 38
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e6 e2       	ldi	r30, 0x26	; 38
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	87 7f       	andi	r24, 0xF7	; 247
    1c6e:	8c 93       	st	X, r24
    1c70:	03 c0       	rjmp	.+6      	; 0x1c78 <ADC_setInterrupt+0x52>
		break;
	default:
		return E_NOK;
    1c72:	31 e0       	ldi	r19, 0x01	; 1
    1c74:	3a 83       	std	Y+2, r19	; 0x02
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <ADC_setInterrupt+0x54>
	}

	return E_OK;
    1c78:	1a 82       	std	Y+2, r1	; 0x02
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <ADC_callback>:

//Set the user function to be executed on ISR
void ADC_callback(void (*func_ptr)(void)) {
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <ADC_callback+0x6>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
	user_ptr = func_ptr;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	90 93 99 01 	sts	0x0199, r25
    1ca0:	80 93 98 01 	sts	0x0198, r24
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <__vector_16>:
//ISR for the ADC
ISR(ADC_vect) {
    1cae:	1f 92       	push	r1
    1cb0:	0f 92       	push	r0
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	0f 92       	push	r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	2f 93       	push	r18
    1cba:	3f 93       	push	r19
    1cbc:	4f 93       	push	r20
    1cbe:	5f 93       	push	r21
    1cc0:	6f 93       	push	r22
    1cc2:	7f 93       	push	r23
    1cc4:	8f 93       	push	r24
    1cc6:	9f 93       	push	r25
    1cc8:	af 93       	push	r26
    1cca:	bf 93       	push	r27
    1ccc:	ef 93       	push	r30
    1cce:	ff 93       	push	r31
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
	(*user_ptr)();
    1cd8:	e0 91 98 01 	lds	r30, 0x0198
    1cdc:	f0 91 99 01 	lds	r31, 0x0199
    1ce0:	09 95       	icall
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	ff 91       	pop	r31
    1ce8:	ef 91       	pop	r30
    1cea:	bf 91       	pop	r27
    1cec:	af 91       	pop	r26
    1cee:	9f 91       	pop	r25
    1cf0:	8f 91       	pop	r24
    1cf2:	7f 91       	pop	r23
    1cf4:	6f 91       	pop	r22
    1cf6:	5f 91       	pop	r21
    1cf8:	4f 91       	pop	r20
    1cfa:	3f 91       	pop	r19
    1cfc:	2f 91       	pop	r18
    1cfe:	0f 90       	pop	r0
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	0f 90       	pop	r0
    1d04:	1f 90       	pop	r1
    1d06:	18 95       	reti

00001d08 <ADC_startConversion>:

//Start the ADC conversion - Will be notify of the end through ISR
StdReturn ADC_startConversion(uint8 channel) {
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <ADC_startConversion+0x6>
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	89 83       	std	Y+1, r24	; 0x01
	if (channel > 7) {
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	88 30       	cpi	r24, 0x08	; 8
    1d18:	18 f0       	brcs	.+6      	; 0x1d20 <ADC_startConversion+0x18>
		return E_NOK;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	17 c0       	rjmp	.+46     	; 0x1d4e <ADC_startConversion+0x46>
	} else {
		//Select channel
		ADMUX &= CHANNELS_UNSELECT_MASK;
    1d20:	a7 e2       	ldi	r26, 0x27	; 39
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e7 e2       	ldi	r30, 0x27	; 39
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 7f       	andi	r24, 0xF8	; 248
    1d2c:	8c 93       	st	X, r24
		ADMUX |= channel;
    1d2e:	a7 e2       	ldi	r26, 0x27	; 39
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e7 e2       	ldi	r30, 0x27	; 39
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	90 81       	ld	r25, Z
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	89 2b       	or	r24, r25
    1d3c:	8c 93       	st	X, r24
		//Start conversion
		SET_BIT(ADCSRA, ADSC);
    1d3e:	a6 e2       	ldi	r26, 0x26	; 38
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e6 e2       	ldi	r30, 0x26	; 38
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	80 64       	ori	r24, 0x40	; 64
    1d4a:	8c 93       	st	X, r24
	}
	return E_OK;
    1d4c:	1a 82       	std	Y+2, r1	; 0x02
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <ADC_getValue>:

//Get the value in ADC data registers
extern StdReturn ADC_getValue(uint16 *adcValue) {
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <ADC_getValue+0x6>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <ADC_getValue+0x8>
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
	uint16 adcVal_Loc = 0;
    1d6a:	1a 82       	std	Y+2, r1	; 0x02
    1d6c:	19 82       	std	Y+1, r1	; 0x01
#if defined(RESOLUTION_10_BIT)
	adcVal_Loc = ADCL + (ADCH << 8); //Get the values of the two ADC registers
    1d6e:	e4 e2       	ldi	r30, 0x24	; 36
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	e5 e2       	ldi	r30, 0x25	; 37
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	98 2f       	mov	r25, r24
    1d84:	88 27       	eor	r24, r24
    1d86:	82 0f       	add	r24, r18
    1d88:	93 1f       	adc	r25, r19
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	*adcValue = (adcVal_Loc & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	93 70       	andi	r25, 0x03	; 3
    1d94:	eb 81       	ldd	r30, Y+3	; 0x03
    1d96:	fc 81       	ldd	r31, Y+4	; 0x04
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
#elif defined(RESOLUTION_8_BIT)
	*adcValue = ADCH;
#endif
	return E_OK;
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <ADC_readValue>:

//Poll and read the ADC value
extern StdReturn ADC_readValue(uint8 channel, uint16 *adcValue) {
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <ADC_readValue+0x6>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <ADC_readValue+0x8>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <ADC_readValue+0xa>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    1dbc:	7d 83       	std	Y+5, r23	; 0x05
    1dbe:	6c 83       	std	Y+4, r22	; 0x04
	uint16 adcVal_Loc = 0;
    1dc0:	1a 82       	std	Y+2, r1	; 0x02
    1dc2:	19 82       	std	Y+1, r1	; 0x01
	if (channel > 7) {
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	88 30       	cpi	r24, 0x08	; 8
    1dc8:	18 f0       	brcs	.+6      	; 0x1dd0 <ADC_readValue+0x24>
		return E_NOK;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	8e 83       	std	Y+6, r24	; 0x06
    1dce:	2e c0       	rjmp	.+92     	; 0x1e2c <ADC_readValue+0x80>
	} else {
		//Select channel
		ADMUX &= CHANNELS_UNSELECT_MASK;
    1dd0:	a7 e2       	ldi	r26, 0x27	; 39
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e7 e2       	ldi	r30, 0x27	; 39
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 7f       	andi	r24, 0xF8	; 248
    1ddc:	8c 93       	st	X, r24
		ADMUX |= channel;
    1dde:	a7 e2       	ldi	r26, 0x27	; 39
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e7 e2       	ldi	r30, 0x27	; 39
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	90 81       	ld	r25, Z
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	89 2b       	or	r24, r25
    1dec:	8c 93       	st	X, r24
		//Start conversion
		SET_BIT(ADCSRA, ADSC);
    1dee:	a6 e2       	ldi	r26, 0x26	; 38
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e6 e2       	ldi	r30, 0x26	; 38
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 64       	ori	r24, 0x40	; 64
    1dfa:	8c 93       	st	X, r24
		//Wait conversion to finish
		//while (READ_BIT(ADCSRA, ADSC) == 1)
			//;
		//return the read value
#if defined(RESOLUTION_10_BIT)
		adcVal_Loc = ADCL + (ADCH << 8); //Get the values of the two ADC registers
    1dfc:	e4 e2       	ldi	r30, 0x24	; 36
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	e5 e2       	ldi	r30, 0x25	; 37
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	98 2f       	mov	r25, r24
    1e12:	88 27       	eor	r24, r24
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	9a 83       	std	Y+2, r25	; 0x02
    1e1a:	89 83       	std	Y+1, r24	; 0x01
		*adcValue = (adcVal_Loc & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	93 70       	andi	r25, 0x03	; 3
    1e22:	ec 81       	ldd	r30, Y+4	; 0x04
    1e24:	fd 81       	ldd	r31, Y+5	; 0x05
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
#elif defined(RESOLUTION_8_BIT)
		*adcValue = ADCH;
#endif
	}

	return E_OK;
    1e2a:	1e 82       	std	Y+6, r1	; 0x06
    1e2c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1e2e:	26 96       	adiw	r28, 0x06	; 6
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <ADC_readVolt>:

//Poll and read the voltage on the ADC pin
StdReturn ADC_readVolt(uint8 channel, f32 *volt) {
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <ADC_readVolt+0x6>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <ADC_readVolt+0x8>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <ADC_readVolt+0xa>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	7d 83       	std	Y+5, r23	; 0x05
    1e52:	6c 83       	std	Y+4, r22	; 0x04
	uint16 adcVal_Loc = 0;
    1e54:	1a 82       	std	Y+2, r1	; 0x02
    1e56:	19 82       	std	Y+1, r1	; 0x01
	if (channel > 7) {
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	88 30       	cpi	r24, 0x08	; 8
    1e5c:	18 f0       	brcs	.+6      	; 0x1e64 <ADC_readVolt+0x24>
		return E_NOK;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	8e 83       	std	Y+6, r24	; 0x06
    1e62:	2d c0       	rjmp	.+90     	; 0x1ebe <ADC_readVolt+0x7e>
	} else {
		ADC_readValue(channel, &adcVal_Loc);
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9e 01       	movw	r18, r28
    1e68:	2f 5f       	subi	r18, 0xFF	; 255
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6c:	b9 01       	movw	r22, r18
    1e6e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <ADC_readValue>
		*volt = (((f32)adcVal_Loc * (f32)VREF) / (f32)ADC_MAX);
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	cc 01       	movw	r24, r24
    1e78:	a0 e0       	ldi	r26, 0x00	; 0
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 ea       	ldi	r20, 0xA0	; 160
    1e92:	50 e4       	ldi	r21, 0x40	; 64
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	54 e4       	ldi	r21, 0x44	; 68
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb2:	fd 81       	ldd	r31, Y+5	; 0x05
    1eb4:	80 83       	st	Z, r24
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	a2 83       	std	Z+2, r26	; 0x02
    1eba:	b3 83       	std	Z+3, r27	; 0x03
	}
	return E_OK;
    1ebc:	1e 82       	std	Y+6, r1	; 0x06
    1ebe:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1ec0:	26 96       	adiw	r28, 0x06	; 6
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <LCD_lcd_init>:

#include "lcd.h"


void LCD_lcd_init(void)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	6c 97       	sbiw	r28, 0x1c	; 28
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 ea       	ldi	r26, 0xA0	; 160
    1eec:	b1 e4       	ldi	r27, 0x41	; 65
    1eee:	89 8f       	std	Y+25, r24	; 0x19
    1ef0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ef4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8d 8b       	std	Y+21, r24	; 0x15
    1f10:	9e 8b       	std	Y+22, r25	; 0x16
    1f12:	af 8b       	std	Y+23, r26	; 0x17
    1f14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f16:	6d 89       	ldd	r22, Y+21	; 0x15
    1f18:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_lcd_init+0x66>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9c 8b       	std	Y+20, r25	; 0x14
    1f34:	8b 8b       	std	Y+19, r24	; 0x13
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_lcd_init+0xe4>
	else if (__tmp > 65535)
    1f38:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_lcd_init+0xc6>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9a 8b       	std	Y+18, r25	; 0x12
    1f80:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f82:	89 89       	ldd	r24, Y+17	; 0x11
    1f84:	9a 89       	ldd	r25, Y+18	; 0x12
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_lcd_init+0xb4>
    1f8a:	9a 8b       	std	Y+18, r25	; 0x12
    1f8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_lcd_init+0xa8>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9c 8b       	std	Y+20, r25	; 0x14
    1fb4:	8b 8b       	std	Y+19, r24	; 0x13
    1fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fba:	98 8b       	std	Y+16, r25	; 0x10
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
    1fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc0:	98 89       	ldd	r25, Y+16	; 0x10
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_lcd_init+0xf0>
    1fc6:	98 8b       	std	Y+16, r25	; 0x10
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(20);
	DataDir_LCD_control |= (1<<EN_switch | 1<<ReadWrite | 1<<RS_switch) ;
    1fca:	a7 e3       	ldi	r26, 0x37	; 55
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e7 e3       	ldi	r30, 0x37	; 55
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	87 60       	ori	r24, 0x07	; 7
    1fd6:	8c 93       	st	X, r24
	LCD_control &= ~(1<<EN_switch | 1<<ReadWrite | 1<<RS_switch) ;
    1fd8:	a8 e3       	ldi	r26, 0x38	; 56
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 e3       	ldi	r30, 0x38	; 56
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	88 7f       	andi	r24, 0xF8	; 248
    1fe4:	8c 93       	st	X, r24

	DataDir_LCD_port = 0xff ;
    1fe6:	e1 e3       	ldi	r30, 0x31	; 49
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	80 83       	st	Z, r24
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e7       	ldi	r26, 0x70	; 112
    1ff4:	b1 e4       	ldi	r27, 0x41	; 65
    1ff6:	8b 87       	std	Y+11, r24	; 0x0b
    1ff8:	9c 87       	std	Y+12, r25	; 0x0c
    1ffa:	ad 87       	std	Y+13, r26	; 0x0d
    1ffc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2000:	7c 85       	ldd	r23, Y+12	; 0x0c
    2002:	8d 85       	ldd	r24, Y+13	; 0x0d
    2004:	9e 85       	ldd	r25, Y+14	; 0x0e
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8f 83       	std	Y+7, r24	; 0x07
    2018:	98 87       	std	Y+8, r25	; 0x08
    201a:	a9 87       	std	Y+9, r26	; 0x09
    201c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <LCD_lcd_init+0x16e>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	3f c0       	rjmp	.+126    	; 0x20be <LCD_lcd_init+0x1ec>
	else if (__tmp > 65535)
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <LCD_lcd_init+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6b 85       	ldd	r22, Y+11	; 0x0b
    205a:	7c 85       	ldd	r23, Y+12	; 0x0c
    205c:	8d 85       	ldd	r24, Y+13	; 0x0d
    205e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_lcd_init+0x1ce>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_lcd_init+0x1bc>
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <LCD_lcd_init+0x1b0>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <LCD_lcd_init+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_lcd_init+0x1f8>
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

	LCD_clear_screen ();
    20d2:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clear_screen>

#ifdef EIGHT_BIT_MODE
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
    20d6:	88 e3       	ldi	r24, 0x38	; 56
    20d8:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_Send_A_Command>

	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);

#endif

	LCD_Send_A_Command(LCD_ENTRY_MODE);
    20dc:	86 e0       	ldi	r24, 0x06	; 6
    20de:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
    20e2:	80 e8       	ldi	r24, 0x80	; 128
    20e4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);
    20e8:	8f e0       	ldi	r24, 0x0F	; 15
    20ea:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_Send_A_Command>

}
    20ee:	6c 96       	adiw	r28, 0x1c	; 28
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <LCD_clear_screen>:

void LCD_clear_screen ()
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_A_Command(LCD_CLEAR_SCREEN); // clear the screen
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_Send_A_Command>



}
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <LCD_GotoXY>:

void LCD_GotoXY(unsigned char line, unsigned char position )
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <LCD_GotoXY+0x6>
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	6a 83       	std	Y+2, r22	; 0x02

	if(line==0)
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	88 23       	and	r24, r24
    2126:	41 f4       	brne	.+16     	; 0x2138 <LCD_GotoXY+0x24>
	{
		if (position < 16 && position >=0)
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	80 31       	cpi	r24, 0x10	; 16
    212c:	78 f4       	brcc	.+30     	; 0x214c <LCD_GotoXY+0x38>
			LCD_Send_A_Command(0x80+position);
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	80 58       	subi	r24, 0x80	; 128
    2132:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_Send_A_Command>
    2136:	0a c0       	rjmp	.+20     	; 0x214c <LCD_GotoXY+0x38>
	}
	else if (line==1)
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	39 f4       	brne	.+14     	; 0x214c <LCD_GotoXY+0x38>
	{
		if (position < 16 && position >=0)
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	80 31       	cpi	r24, 0x10	; 16
    2142:	20 f4       	brcc	.+8      	; 0x214c <LCD_GotoXY+0x38>
			LCD_Send_A_Command(0xc0 + position);
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	80 54       	subi	r24, 0x40	; 64
    2148:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_Send_A_Command>
	}
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <LCD_check_lcd_isbusy>:




void LCD_check_lcd_isbusy()
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_port &= ~(0xff<<DATA_shift) ;
    2160:	e1 e3       	ldi	r30, 0x31	; 49
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	e1 e3       	ldi	r30, 0x31	; 49
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	10 82       	st	Z, r1
	LCD_control |= (1<<ReadWrite); // read
    216c:	a8 e3       	ldi	r26, 0x38	; 56
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e8 e3       	ldi	r30, 0x38	; 56
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	82 60       	ori	r24, 0x02	; 2
    2178:	8c 93       	st	X, r24
	LCD_control &= ~ (1<<RS_switch);
    217a:	a8 e3       	ldi	r26, 0x38	; 56
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e8 e3       	ldi	r30, 0x38	; 56
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	8e 7f       	andi	r24, 0xFE	; 254
    2186:	8c 93       	st	X, r24

	//	while (LCD_port >= 0x80)
	//	{
	LCD_lcd_kick ();
    2188:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_lcd_kick>
	//	}

	//	_delay_ms (500) ;
	DataDir_LCD_port = 0xFF; //0xFF means 0b11111111
    218c:	e1 e3       	ldi	r30, 0x31	; 49
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	8f ef       	ldi	r24, 0xFF	; 255
    2192:	80 83       	st	Z, r24
	LCD_control &= ~ (1<<ReadWrite); //write
    2194:	a8 e3       	ldi	r26, 0x38	; 56
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e8 e3       	ldi	r30, 0x38	; 56
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8d 7f       	andi	r24, 0xFD	; 253
    21a0:	8c 93       	st	X, r24
}
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <LCD_lcd_kick>:




void LCD_lcd_kick ()
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	2e 97       	sbiw	r28, 0x0e	; 14
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
	LCD_control &= ~ (1<<EN_switch);
    21be:	a8 e3       	ldi	r26, 0x38	; 56
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e8 e3       	ldi	r30, 0x38	; 56
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8b 7f       	andi	r24, 0xFB	; 251
    21ca:	8c 93       	st	X, r24
	asm volatile ("nop");
    21cc:	00 00       	nop
	asm volatile ("nop");
    21ce:	00 00       	nop
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a8 e4       	ldi	r26, 0x48	; 72
    21d6:	b2 e4       	ldi	r27, 0x42	; 66
    21d8:	8b 87       	std	Y+11, r24	; 0x0b
    21da:	9c 87       	std	Y+12, r25	; 0x0c
    21dc:	ad 87       	std	Y+13, r26	; 0x0d
    21de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8f 83       	std	Y+7, r24	; 0x07
    21fa:	98 87       	std	Y+8, r25	; 0x08
    21fc:	a9 87       	std	Y+9, r26	; 0x09
    21fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <LCD_lcd_kick+0x78>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <LCD_lcd_kick+0xf6>
	else if (__tmp > 65535)
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <LCD_lcd_kick+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6b 85       	ldd	r22, Y+11	; 0x0b
    223c:	7c 85       	ldd	r23, Y+12	; 0x0c
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	9e 85       	ldd	r25, Y+14	; 0x0e
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <LCD_lcd_kick+0xd8>
    2264:	88 ec       	ldi	r24, 0xC8	; 200
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <LCD_lcd_kick+0xc6>
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <LCD_lcd_kick+0xba>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <LCD_lcd_kick+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <LCD_lcd_kick+0x102>
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (50) ;
	LCD_control |= 1<<EN_switch;
    22b4:	a8 e3       	ldi	r26, 0x38	; 56
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e8 e3       	ldi	r30, 0x38	; 56
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	84 60       	ori	r24, 0x04	; 4
    22c0:	8c 93       	st	X, r24
}
    22c2:	2e 96       	adiw	r28, 0x0e	; 14
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <LCD_Send_A_Command>:


void LCD_Send_A_Command(unsigned char command)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	0f 92       	push	r0
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
    22e0:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_check_lcd_isbusy>

	LCD_port = command  ;
    22e4:	e2 e3       	ldi	r30, 0x32	; 50
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	80 83       	st	Z, r24
	LCD_control &= ~ ((1<<ReadWrite)|(1<<RS_switch));
    22ec:	a8 e3       	ldi	r26, 0x38	; 56
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e8 e3       	ldi	r30, 0x38	; 56
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	8c 7f       	andi	r24, 0xFC	; 252
    22f8:	8c 93       	st	X, r24
	LCD_lcd_kick ();
    22fa:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_lcd_kick>
	LCD_control &= ~ ((1<<ReadWrite)|(1<<RS_switch));
	//LCD_VoidLcd_referish();
	LCD_lcd_kick ();
#endif

}
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <LCD_Send_A_Command_4mode>:

void LCD_Send_A_Command_4mode(unsigned char command)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	0f 92       	push	r0
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	89 83       	std	Y+1, r24	; 0x01
	LCD_check_lcd_isbusy();
    2312:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_check_lcd_isbusy>
	LCD_port&= 0x0F;
    2316:	a2 e3       	ldi	r26, 0x32	; 50
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e2 e3       	ldi	r30, 0x32	; 50
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8f 70       	andi	r24, 0x0F	; 15
    2322:	8c 93       	st	X, r24
	LCD_port |= (command&0xF0);
    2324:	a2 e3       	ldi	r26, 0x32	; 50
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e2 e3       	ldi	r30, 0x32	; 50
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	98 2f       	mov	r25, r24
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	80 7f       	andi	r24, 0xF0	; 240
    2334:	89 2b       	or	r24, r25
    2336:	8c 93       	st	X, r24
	LCD_control &= ~ ((1<<ReadWrite)|(1<<RS_switch));
    2338:	a8 e3       	ldi	r26, 0x38	; 56
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e8 e3       	ldi	r30, 0x38	; 56
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	8c 7f       	andi	r24, 0xFC	; 252
    2344:	8c 93       	st	X, r24
	LCD_lcd_kick ();
    2346:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_lcd_kick>
	LCD_control &= 0x0F;  // Make Data Nibble as 0000
    234a:	a8 e3       	ldi	r26, 0x38	; 56
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e8 e3       	ldi	r30, 0x38	; 56
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	8f 70       	andi	r24, 0x0F	; 15
    2356:	8c 93       	st	X, r24
	LCD_control |= ((command<<4)&0xF0);
    2358:	a8 e3       	ldi	r26, 0x38	; 56
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e8 e3       	ldi	r30, 0x38	; 56
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	28 2f       	mov	r18, r24
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	82 95       	swap	r24
    236c:	92 95       	swap	r25
    236e:	90 7f       	andi	r25, 0xF0	; 240
    2370:	98 27       	eor	r25, r24
    2372:	80 7f       	andi	r24, 0xF0	; 240
    2374:	98 27       	eor	r25, r24
    2376:	82 2b       	or	r24, r18
    2378:	8c 93       	st	X, r24
	LCD_lcd_kick ();
    237a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_lcd_kick>
	//LCD_port = 0;
}
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <LCD_Send_A_Character>:




void LCD_Send_A_Character(unsigned char character)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	0f 92       	push	r0
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	89 83       	std	Y+1, r24	; 0x01

#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
    2392:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_check_lcd_isbusy>

	LCD_control |= 1<<RS_switch; //turn RS ON for Data mode.
    2396:	a8 e3       	ldi	r26, 0x38	; 56
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e8 e3       	ldi	r30, 0x38	; 56
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	81 60       	ori	r24, 0x01	; 1
    23a2:	8c 93       	st	X, r24
	LCD_port = ( ( (character  ) << DATA_shift)   )  ;
    23a4:	e2 e3       	ldi	r30, 0x32	; 50
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	80 83       	st	Z, r24
	LCD_control |= 1<<RS_switch; //turn RS ON for Data mode.
    23ac:	a8 e3       	ldi	r26, 0x38	; 56
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e8 e3       	ldi	r30, 0x38	; 56
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	81 60       	ori	r24, 0x01	; 1
    23b8:	8c 93       	st	X, r24
	LCD_control &= ~ (1<<ReadWrite);//turn RW off so you can write.
    23ba:	a8 e3       	ldi	r26, 0x38	; 56
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e8 e3       	ldi	r30, 0x38	; 56
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8d 7f       	andi	r24, 0xFD	; 253
    23c6:	8c 93       	st	X, r24


	LCD_lcd_kick ();
    23c8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_lcd_kick>
	LCD_lcd_kick ();

#endif


}
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <LCD_Send_A_String>:

void LCD_Send_A_String(char *StringOfCharacters)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <LCD_Send_A_String+0x6>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <LCD_Send_A_String+0x8>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	8b 83       	std	Y+3, r24	; 0x03


	int count=0 ;//to count how much char on the line (it should be 16 char only)
    23e4:	1a 82       	std	Y+2, r1	; 0x02
    23e6:	19 82       	std	Y+1, r1	; 0x01
    23e8:	2c c0       	rjmp	.+88     	; 0x2442 <LCD_Send_A_String+0x6e>
	while(*StringOfCharacters > 0)
	{
		count++;
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_A_Character(*StringOfCharacters++);
    23f4:	eb 81       	ldd	r30, Y+3	; 0x03
    23f6:	fc 81       	ldd	r31, Y+4	; 0x04
    23f8:	20 81       	ld	r18, Z
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03
    2404:	82 2f       	mov	r24, r18
    2406:	0e 94 c3 11 	call	0x2386	; 0x2386 <LCD_Send_A_Character>
		if (count == 16  ) // go to the second line
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	80 31       	cpi	r24, 0x10	; 16
    2410:	91 05       	cpc	r25, r1
    2412:	29 f4       	brne	.+10     	; 0x241e <LCD_Send_A_String+0x4a>
		{
			LCD_GotoXY(1,0); //line 1 position zero
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_GotoXY>
    241c:	12 c0       	rjmp	.+36     	; 0x2442 <LCD_Send_A_String+0x6e>
		}
		else if (count == 32 || count==33) // clear screen and show again
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	80 32       	cpi	r24, 0x20	; 32
    2424:	91 05       	cpc	r25, r1
    2426:	29 f0       	breq	.+10     	; 0x2432 <LCD_Send_A_String+0x5e>
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	81 32       	cpi	r24, 0x21	; 33
    242e:	91 05       	cpc	r25, r1
    2430:	41 f4       	brne	.+16     	; 0x2442 <LCD_Send_A_String+0x6e>
		{
			LCD_clear_screen();
    2432:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clear_screen>
			LCD_GotoXY(0,0); //line 0 position zero
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_GotoXY>
			count = 0 ;
    243e:	1a 82       	std	Y+2, r1	; 0x02
    2440:	19 82       	std	Y+1, r1	; 0x01
void LCD_Send_A_String(char *StringOfCharacters)
{


	int count=0 ;//to count how much char on the line (it should be 16 char only)
	while(*StringOfCharacters > 0)
    2442:	eb 81       	ldd	r30, Y+3	; 0x03
    2444:	fc 81       	ldd	r31, Y+4	; 0x04
    2446:	80 81       	ld	r24, Z
    2448:	88 23       	and	r24, r24
    244a:	79 f6       	brne	.-98     	; 0x23ea <LCD_Send_A_String+0x16>
			LCD_clear_screen();
			LCD_GotoXY(0,0); //line 0 position zero
			count = 0 ;
		}
	}
}
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <LCD_display_number>:


void LCD_display_number (int Number )
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	29 97       	sbiw	r28, 0x09	; 9
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	99 87       	std	Y+9, r25	; 0x09
    2470:	88 87       	std	Y+8, r24	; 0x08

	char  str[7];

	sprintf(str,"%d",Number);	// Adjust the formatting to your liking.
    2472:	00 d0       	rcall	.+0      	; 0x2474 <LCD_display_number+0x1a>
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LCD_display_number+0x1c>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <LCD_display_number+0x1e>
    2478:	ed b7       	in	r30, 0x3d	; 61
    247a:	fe b7       	in	r31, 0x3e	; 62
    247c:	31 96       	adiw	r30, 0x01	; 1
    247e:	ce 01       	movw	r24, r28
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	80 83       	st	Z, r24
    2486:	80 e6       	ldi	r24, 0x60	; 96
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	93 83       	std	Z+3, r25	; 0x03
    248c:	82 83       	std	Z+2, r24	; 0x02
    248e:	88 85       	ldd	r24, Y+8	; 0x08
    2490:	99 85       	ldd	r25, Y+9	; 0x09
    2492:	95 83       	std	Z+5, r25	; 0x05
    2494:	84 83       	std	Z+4, r24	; 0x04
    2496:	0e 94 d7 13 	call	0x27ae	; 0x27ae <sprintf>
    249a:	8d b7       	in	r24, 0x3d	; 61
    249c:	9e b7       	in	r25, 0x3e	; 62
    249e:	06 96       	adiw	r24, 0x06	; 6
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	9e bf       	out	0x3e, r25	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	8d bf       	out	0x3d, r24	; 61

	LCD_Send_A_String (str) ;
    24aa:	ce 01       	movw	r24, r28
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_Send_A_String>

}
    24b2:	29 96       	adiw	r28, 0x09	; 9
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <LCD_display_real_number>:

void LCD_display_real_number (double  Number )
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	a8 97       	sbiw	r28, 0x28	; 40
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	6f 8f       	std	Y+31, r22	; 0x1f
    24da:	78 a3       	std	Y+32, r23	; 0x20
    24dc:	89 a3       	std	Y+33, r24	; 0x21
    24de:	9a a3       	std	Y+34, r25	; 0x22
	char  str[16];


	char *tmpSign = (Number < 0) ? "-" : "";
    24e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24e2:	78 a1       	ldd	r23, Y+32	; 0x20
    24e4:	89 a1       	ldd	r24, Y+33	; 0x21
    24e6:	9a a1       	ldd	r25, Y+34	; 0x22
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <LCD_display_real_number+0x3e>
    24f8:	23 e6       	ldi	r18, 0x63	; 99
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	38 a7       	std	Y+40, r19	; 0x28
    24fe:	2f a3       	std	Y+39, r18	; 0x27
    2500:	04 c0       	rjmp	.+8      	; 0x250a <LCD_display_real_number+0x46>
    2502:	45 e6       	ldi	r20, 0x65	; 101
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	58 a7       	std	Y+40, r21	; 0x28
    2508:	4f a3       	std	Y+39, r20	; 0x27
    250a:	8f a1       	ldd	r24, Y+39	; 0x27
    250c:	98 a5       	ldd	r25, Y+40	; 0x28
    250e:	9e 87       	std	Y+14, r25	; 0x0e
    2510:	8d 87       	std	Y+13, r24	; 0x0d
	float tmpVal = (Number < 0) ? -Number : Number;
    2512:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2514:	78 a1       	ldd	r23, Y+32	; 0x20
    2516:	89 a1       	ldd	r24, Y+33	; 0x21
    2518:	9a a1       	ldd	r25, Y+34	; 0x22
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2526:	88 23       	and	r24, r24
    2528:	64 f4       	brge	.+24     	; 0x2542 <LCD_display_real_number+0x7e>
    252a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252c:	98 a1       	ldd	r25, Y+32	; 0x20
    252e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2530:	ba a1       	ldd	r27, Y+34	; 0x22
    2532:	9c 01       	movw	r18, r24
    2534:	ad 01       	movw	r20, r26
    2536:	50 58       	subi	r21, 0x80	; 128
    2538:	2b a3       	std	Y+35, r18	; 0x23
    253a:	3c a3       	std	Y+36, r19	; 0x24
    253c:	4d a3       	std	Y+37, r20	; 0x25
    253e:	5e a3       	std	Y+38, r21	; 0x26
    2540:	08 c0       	rjmp	.+16     	; 0x2552 <LCD_display_real_number+0x8e>
    2542:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2544:	98 a1       	ldd	r25, Y+32	; 0x20
    2546:	a9 a1       	ldd	r26, Y+33	; 0x21
    2548:	ba a1       	ldd	r27, Y+34	; 0x22
    254a:	8b a3       	std	Y+35, r24	; 0x23
    254c:	9c a3       	std	Y+36, r25	; 0x24
    254e:	ad a3       	std	Y+37, r26	; 0x25
    2550:	be a3       	std	Y+38, r27	; 0x26
    2552:	2b a1       	ldd	r18, Y+35	; 0x23
    2554:	3c a1       	ldd	r19, Y+36	; 0x24
    2556:	4d a1       	ldd	r20, Y+37	; 0x25
    2558:	5e a1       	ldd	r21, Y+38	; 0x26
    255a:	29 87       	std	Y+9, r18	; 0x09
    255c:	3a 87       	std	Y+10, r19	; 0x0a
    255e:	4b 87       	std	Y+11, r20	; 0x0b
    2560:	5c 87       	std	Y+12, r21	; 0x0c

	int tmpInt1 = tmpVal;                  // Get the integer (678).
    2562:	69 85       	ldd	r22, Y+9	; 0x09
    2564:	7a 85       	ldd	r23, Y+10	; 0x0a
    2566:	8b 85       	ldd	r24, Y+11	; 0x0b
    2568:	9c 85       	ldd	r25, Y+12	; 0x0c
    256a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	98 87       	std	Y+8, r25	; 0x08
    2574:	8f 83       	std	Y+7, r24	; 0x07
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
    2576:	8f 81       	ldd	r24, Y+7	; 0x07
    2578:	98 85       	ldd	r25, Y+8	; 0x08
    257a:	aa 27       	eor	r26, r26
    257c:	97 fd       	sbrc	r25, 7
    257e:	a0 95       	com	r26
    2580:	ba 2f       	mov	r27, r26
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    258a:	9b 01       	movw	r18, r22
    258c:	ac 01       	movw	r20, r24
    258e:	69 85       	ldd	r22, Y+9	; 0x09
    2590:	7a 85       	ldd	r23, Y+10	; 0x0a
    2592:	8b 85       	ldd	r24, Y+11	; 0x0b
    2594:	9c 85       	ldd	r25, Y+12	; 0x0c
    2596:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8b 83       	std	Y+3, r24	; 0x03
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	ad 83       	std	Y+5, r26	; 0x05
    25a4:	be 83       	std	Y+6, r27	; 0x06
	int tmpInt2 = tmpFrac * 10000;  // Turn into integer (123).
    25a6:	6b 81       	ldd	r22, Y+3	; 0x03
    25a8:	7c 81       	ldd	r23, Y+4	; 0x04
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e4       	ldi	r19, 0x40	; 64
    25b2:	4c e1       	ldi	r20, 0x1C	; 28
    25b4:	56 e4       	ldi	r21, 0x46	; 70
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01

	// Print as parts, note that you need 0-padding for fractional bit.

	sprintf (str, "%s%d.%04d", tmpSign, tmpInt1, tmpInt2);
    25ce:	4d b7       	in	r20, 0x3d	; 61
    25d0:	5e b7       	in	r21, 0x3e	; 62
    25d2:	4a 50       	subi	r20, 0x0A	; 10
    25d4:	50 40       	sbci	r21, 0x00	; 0
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	5e bf       	out	0x3e, r21	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	4d bf       	out	0x3d, r20	; 61
    25e0:	ed b7       	in	r30, 0x3d	; 61
    25e2:	fe b7       	in	r31, 0x3e	; 62
    25e4:	31 96       	adiw	r30, 0x01	; 1
    25e6:	ce 01       	movw	r24, r28
    25e8:	0f 96       	adiw	r24, 0x0f	; 15
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	86 e6       	ldi	r24, 0x66	; 102
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	93 83       	std	Z+3, r25	; 0x03
    25f4:	82 83       	std	Z+2, r24	; 0x02
    25f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fa:	95 83       	std	Z+5, r25	; 0x05
    25fc:	84 83       	std	Z+4, r24	; 0x04
    25fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2600:	98 85       	ldd	r25, Y+8	; 0x08
    2602:	97 83       	std	Z+7, r25	; 0x07
    2604:	86 83       	std	Z+6, r24	; 0x06
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	91 87       	std	Z+9, r25	; 0x09
    260c:	80 87       	std	Z+8, r24	; 0x08
    260e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <sprintf>
    2612:	8d b7       	in	r24, 0x3d	; 61
    2614:	9e b7       	in	r25, 0x3e	; 62
    2616:	0a 96       	adiw	r24, 0x0a	; 10
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	9e bf       	out	0x3e, r25	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	8d bf       	out	0x3d, r24	; 61



	LCD_Send_A_String (str) ;
    2622:	ce 01       	movw	r24, r28
    2624:	0f 96       	adiw	r24, 0x0f	; 15
    2626:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_Send_A_String>

}
    262a:	a8 96       	adiw	r28, 0x28	; 40
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <Value_Changes>:
uint16 adcValue;
f32 c;
char Temp[]={"Temperature"};
char symb[]={223};
void Value_Changes(void)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
	ADC_getValue(&adcValue);
    2644:	8e e9       	ldi	r24, 0x9E	; 158
    2646:	91 e0       	ldi	r25, 0x01	; 1
    2648:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <ADC_getValue>

	c=(((f32)adcValue)*4.889);
    264c:	80 91 9e 01 	lds	r24, 0x019E
    2650:	90 91 9f 01 	lds	r25, 0x019F
    2654:	cc 01       	movw	r24, r24
    2656:	a0 e0       	ldi	r26, 0x00	; 0
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	20 eb       	ldi	r18, 0xB0	; 176
    266c:	32 e7       	ldi	r19, 0x72	; 114
    266e:	4c e9       	ldi	r20, 0x9C	; 156
    2670:	50 e4       	ldi	r21, 0x40	; 64
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	80 93 9a 01 	sts	0x019A, r24
    267e:	90 93 9b 01 	sts	0x019B, r25
    2682:	a0 93 9c 01 	sts	0x019C, r26
    2686:	b0 93 9d 01 	sts	0x019D, r27
	c=(c/10.00);
    268a:	80 91 9a 01 	lds	r24, 0x019A
    268e:	90 91 9b 01 	lds	r25, 0x019B
    2692:	a0 91 9c 01 	lds	r26, 0x019C
    2696:	b0 91 9d 01 	lds	r27, 0x019D
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	80 93 9a 01 	sts	0x019A, r24
    26b2:	90 93 9b 01 	sts	0x019B, r25
    26b6:	a0 93 9c 01 	sts	0x019C, r26
    26ba:	b0 93 9d 01 	sts	0x019D, r27

}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <main>:
int main (void)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	GPIO_init();
    26cc:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_init>
	LCD_lcd_init();
    26d0:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <LCD_lcd_init>
	ADC_init();
    26d4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <ADC_init>
	ADC_callback(&Value_Changes);
    26d8:	8e e1       	ldi	r24, 0x1E	; 30
    26da:	93 e1       	ldi	r25, 0x13	; 19
    26dc:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <ADC_callback>

	ADC_setInterrupt(ADC_INTERRUPT_ENABLE);
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <ADC_setInterrupt>
	ENABLE_GLOBAL_INTERRUPT();
    26e6:	af e5       	ldi	r26, 0x5F	; 95
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	ef e5       	ldi	r30, 0x5F	; 95
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	80 68       	ori	r24, 0x80	; 128
    26f2:	8c 93       	st	X, r24

	while(1)
	{
		ADC_startConversion(SensorPin);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <ADC_startConversion>


		LCD_Send_A_String("Temp is");
    26fa:	80 e7       	ldi	r24, 0x70	; 112
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_Send_A_String>
		LCD_Send_A_String(" ");
    2702:	88 e7       	ldi	r24, 0x78	; 120
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_Send_A_String>

		//LCD_Send_A_Command(0xC0);
		LCD_display_number(c);
    270a:	80 91 9a 01 	lds	r24, 0x019A
    270e:	90 91 9b 01 	lds	r25, 0x019B
    2712:	a0 91 9c 01 	lds	r26, 0x019C
    2716:	b0 91 9d 01 	lds	r27, 0x019D
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_display_number>

		LCD_Send_A_String(symb);
    272a:	80 e9       	ldi	r24, 0x90	; 144
    272c:	91 e0       	ldi	r25, 0x01	; 1
    272e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_Send_A_String>
		LCD_Send_A_String("C");
    2732:	8a e7       	ldi	r24, 0x7A	; 122
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_Send_A_String>

		LCD_clear_screen();
    273a:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clear_screen>
    273e:	da cf       	rjmp	.-76     	; 0x26f4 <main+0x30>

00002740 <__prologue_saves__>:
    2740:	2f 92       	push	r2
    2742:	3f 92       	push	r3
    2744:	4f 92       	push	r4
    2746:	5f 92       	push	r5
    2748:	6f 92       	push	r6
    274a:	7f 92       	push	r7
    274c:	8f 92       	push	r8
    274e:	9f 92       	push	r9
    2750:	af 92       	push	r10
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	ca 1b       	sub	r28, r26
    276a:	db 0b       	sbc	r29, r27
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	09 94       	ijmp

00002778 <__epilogue_restores__>:
    2778:	2a 88       	ldd	r2, Y+18	; 0x12
    277a:	39 88       	ldd	r3, Y+17	; 0x11
    277c:	48 88       	ldd	r4, Y+16	; 0x10
    277e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2780:	6e 84       	ldd	r6, Y+14	; 0x0e
    2782:	7d 84       	ldd	r7, Y+13	; 0x0d
    2784:	8c 84       	ldd	r8, Y+12	; 0x0c
    2786:	9b 84       	ldd	r9, Y+11	; 0x0b
    2788:	aa 84       	ldd	r10, Y+10	; 0x0a
    278a:	b9 84       	ldd	r11, Y+9	; 0x09
    278c:	c8 84       	ldd	r12, Y+8	; 0x08
    278e:	df 80       	ldd	r13, Y+7	; 0x07
    2790:	ee 80       	ldd	r14, Y+6	; 0x06
    2792:	fd 80       	ldd	r15, Y+5	; 0x05
    2794:	0c 81       	ldd	r16, Y+4	; 0x04
    2796:	1b 81       	ldd	r17, Y+3	; 0x03
    2798:	aa 81       	ldd	r26, Y+2	; 0x02
    279a:	b9 81       	ldd	r27, Y+1	; 0x01
    279c:	ce 0f       	add	r28, r30
    279e:	d1 1d       	adc	r29, r1
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	ed 01       	movw	r28, r26
    27ac:	08 95       	ret

000027ae <sprintf>:
    27ae:	ae e0       	ldi	r26, 0x0E	; 14
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	ed ed       	ldi	r30, 0xDD	; 221
    27b4:	f3 e1       	ldi	r31, 0x13	; 19
    27b6:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__prologue_saves__+0x1c>
    27ba:	0d 89       	ldd	r16, Y+21	; 0x15
    27bc:	1e 89       	ldd	r17, Y+22	; 0x16
    27be:	86 e0       	ldi	r24, 0x06	; 6
    27c0:	8c 83       	std	Y+4, r24	; 0x04
    27c2:	1a 83       	std	Y+2, r17	; 0x02
    27c4:	09 83       	std	Y+1, r16	; 0x01
    27c6:	8f ef       	ldi	r24, 0xFF	; 255
    27c8:	9f e7       	ldi	r25, 0x7F	; 127
    27ca:	9e 83       	std	Y+6, r25	; 0x06
    27cc:	8d 83       	std	Y+5, r24	; 0x05
    27ce:	9e 01       	movw	r18, r28
    27d0:	27 5e       	subi	r18, 0xE7	; 231
    27d2:	3f 4f       	sbci	r19, 0xFF	; 255
    27d4:	ce 01       	movw	r24, r28
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	6f 89       	ldd	r22, Y+23	; 0x17
    27da:	78 8d       	ldd	r23, Y+24	; 0x18
    27dc:	a9 01       	movw	r20, r18
    27de:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vfprintf>
    27e2:	2f 81       	ldd	r18, Y+7	; 0x07
    27e4:	38 85       	ldd	r19, Y+8	; 0x08
    27e6:	02 0f       	add	r16, r18
    27e8:	13 1f       	adc	r17, r19
    27ea:	f8 01       	movw	r30, r16
    27ec:	10 82       	st	Z, r1
    27ee:	2e 96       	adiw	r28, 0x0e	; 14
    27f0:	e4 e0       	ldi	r30, 0x04	; 4
    27f2:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__epilogue_restores__+0x1c>

000027f6 <vfprintf>:
    27f6:	ab e0       	ldi	r26, 0x0B	; 11
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e1 e0       	ldi	r30, 0x01	; 1
    27fc:	f4 e1       	ldi	r31, 0x14	; 20
    27fe:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__prologue_saves__>
    2802:	3c 01       	movw	r6, r24
    2804:	2b 01       	movw	r4, r22
    2806:	5a 01       	movw	r10, r20
    2808:	fc 01       	movw	r30, r24
    280a:	17 82       	std	Z+7, r1	; 0x07
    280c:	16 82       	std	Z+6, r1	; 0x06
    280e:	83 81       	ldd	r24, Z+3	; 0x03
    2810:	81 fd       	sbrc	r24, 1
    2812:	03 c0       	rjmp	.+6      	; 0x281a <vfprintf+0x24>
    2814:	6f ef       	ldi	r22, 0xFF	; 255
    2816:	7f ef       	ldi	r23, 0xFF	; 255
    2818:	c6 c1       	rjmp	.+908    	; 0x2ba6 <vfprintf+0x3b0>
    281a:	9a e0       	ldi	r25, 0x0A	; 10
    281c:	89 2e       	mov	r8, r25
    281e:	1e 01       	movw	r2, r28
    2820:	08 94       	sec
    2822:	21 1c       	adc	r2, r1
    2824:	31 1c       	adc	r3, r1
    2826:	f3 01       	movw	r30, r6
    2828:	23 81       	ldd	r18, Z+3	; 0x03
    282a:	f2 01       	movw	r30, r4
    282c:	23 fd       	sbrc	r18, 3
    282e:	85 91       	lpm	r24, Z+
    2830:	23 ff       	sbrs	r18, 3
    2832:	81 91       	ld	r24, Z+
    2834:	2f 01       	movw	r4, r30
    2836:	88 23       	and	r24, r24
    2838:	09 f4       	brne	.+2      	; 0x283c <vfprintf+0x46>
    283a:	b2 c1       	rjmp	.+868    	; 0x2ba0 <vfprintf+0x3aa>
    283c:	85 32       	cpi	r24, 0x25	; 37
    283e:	39 f4       	brne	.+14     	; 0x284e <vfprintf+0x58>
    2840:	23 fd       	sbrc	r18, 3
    2842:	85 91       	lpm	r24, Z+
    2844:	23 ff       	sbrs	r18, 3
    2846:	81 91       	ld	r24, Z+
    2848:	2f 01       	movw	r4, r30
    284a:	85 32       	cpi	r24, 0x25	; 37
    284c:	29 f4       	brne	.+10     	; 0x2858 <vfprintf+0x62>
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	b3 01       	movw	r22, r6
    2852:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    2856:	e7 cf       	rjmp	.-50     	; 0x2826 <vfprintf+0x30>
    2858:	98 2f       	mov	r25, r24
    285a:	ff 24       	eor	r15, r15
    285c:	ee 24       	eor	r14, r14
    285e:	99 24       	eor	r9, r9
    2860:	ff e1       	ldi	r31, 0x1F	; 31
    2862:	ff 15       	cp	r31, r15
    2864:	d0 f0       	brcs	.+52     	; 0x289a <vfprintf+0xa4>
    2866:	9b 32       	cpi	r25, 0x2B	; 43
    2868:	69 f0       	breq	.+26     	; 0x2884 <vfprintf+0x8e>
    286a:	9c 32       	cpi	r25, 0x2C	; 44
    286c:	28 f4       	brcc	.+10     	; 0x2878 <vfprintf+0x82>
    286e:	90 32       	cpi	r25, 0x20	; 32
    2870:	59 f0       	breq	.+22     	; 0x2888 <vfprintf+0x92>
    2872:	93 32       	cpi	r25, 0x23	; 35
    2874:	91 f4       	brne	.+36     	; 0x289a <vfprintf+0xa4>
    2876:	0e c0       	rjmp	.+28     	; 0x2894 <vfprintf+0x9e>
    2878:	9d 32       	cpi	r25, 0x2D	; 45
    287a:	49 f0       	breq	.+18     	; 0x288e <vfprintf+0x98>
    287c:	90 33       	cpi	r25, 0x30	; 48
    287e:	69 f4       	brne	.+26     	; 0x289a <vfprintf+0xa4>
    2880:	41 e0       	ldi	r20, 0x01	; 1
    2882:	24 c0       	rjmp	.+72     	; 0x28cc <vfprintf+0xd6>
    2884:	52 e0       	ldi	r21, 0x02	; 2
    2886:	f5 2a       	or	r15, r21
    2888:	84 e0       	ldi	r24, 0x04	; 4
    288a:	f8 2a       	or	r15, r24
    288c:	28 c0       	rjmp	.+80     	; 0x28de <vfprintf+0xe8>
    288e:	98 e0       	ldi	r25, 0x08	; 8
    2890:	f9 2a       	or	r15, r25
    2892:	25 c0       	rjmp	.+74     	; 0x28de <vfprintf+0xe8>
    2894:	e0 e1       	ldi	r30, 0x10	; 16
    2896:	fe 2a       	or	r15, r30
    2898:	22 c0       	rjmp	.+68     	; 0x28de <vfprintf+0xe8>
    289a:	f7 fc       	sbrc	r15, 7
    289c:	29 c0       	rjmp	.+82     	; 0x28f0 <vfprintf+0xfa>
    289e:	89 2f       	mov	r24, r25
    28a0:	80 53       	subi	r24, 0x30	; 48
    28a2:	8a 30       	cpi	r24, 0x0A	; 10
    28a4:	70 f4       	brcc	.+28     	; 0x28c2 <vfprintf+0xcc>
    28a6:	f6 fe       	sbrs	r15, 6
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <vfprintf+0xbe>
    28aa:	98 9c       	mul	r9, r8
    28ac:	90 2c       	mov	r9, r0
    28ae:	11 24       	eor	r1, r1
    28b0:	98 0e       	add	r9, r24
    28b2:	15 c0       	rjmp	.+42     	; 0x28de <vfprintf+0xe8>
    28b4:	e8 9c       	mul	r14, r8
    28b6:	e0 2c       	mov	r14, r0
    28b8:	11 24       	eor	r1, r1
    28ba:	e8 0e       	add	r14, r24
    28bc:	f0 e2       	ldi	r31, 0x20	; 32
    28be:	ff 2a       	or	r15, r31
    28c0:	0e c0       	rjmp	.+28     	; 0x28de <vfprintf+0xe8>
    28c2:	9e 32       	cpi	r25, 0x2E	; 46
    28c4:	29 f4       	brne	.+10     	; 0x28d0 <vfprintf+0xda>
    28c6:	f6 fc       	sbrc	r15, 6
    28c8:	6b c1       	rjmp	.+726    	; 0x2ba0 <vfprintf+0x3aa>
    28ca:	40 e4       	ldi	r20, 0x40	; 64
    28cc:	f4 2a       	or	r15, r20
    28ce:	07 c0       	rjmp	.+14     	; 0x28de <vfprintf+0xe8>
    28d0:	9c 36       	cpi	r25, 0x6C	; 108
    28d2:	19 f4       	brne	.+6      	; 0x28da <vfprintf+0xe4>
    28d4:	50 e8       	ldi	r21, 0x80	; 128
    28d6:	f5 2a       	or	r15, r21
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0xe8>
    28da:	98 36       	cpi	r25, 0x68	; 104
    28dc:	49 f4       	brne	.+18     	; 0x28f0 <vfprintf+0xfa>
    28de:	f2 01       	movw	r30, r4
    28e0:	23 fd       	sbrc	r18, 3
    28e2:	95 91       	lpm	r25, Z+
    28e4:	23 ff       	sbrs	r18, 3
    28e6:	91 91       	ld	r25, Z+
    28e8:	2f 01       	movw	r4, r30
    28ea:	99 23       	and	r25, r25
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <vfprintf+0xfa>
    28ee:	b8 cf       	rjmp	.-144    	; 0x2860 <vfprintf+0x6a>
    28f0:	89 2f       	mov	r24, r25
    28f2:	85 54       	subi	r24, 0x45	; 69
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	18 f0       	brcs	.+6      	; 0x28fe <vfprintf+0x108>
    28f8:	80 52       	subi	r24, 0x20	; 32
    28fa:	83 30       	cpi	r24, 0x03	; 3
    28fc:	38 f4       	brcc	.+14     	; 0x290c <vfprintf+0x116>
    28fe:	44 e0       	ldi	r20, 0x04	; 4
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	a4 0e       	add	r10, r20
    2904:	b5 1e       	adc	r11, r21
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	59 83       	std	Y+1, r21	; 0x01
    290a:	0f c0       	rjmp	.+30     	; 0x292a <vfprintf+0x134>
    290c:	93 36       	cpi	r25, 0x63	; 99
    290e:	31 f0       	breq	.+12     	; 0x291c <vfprintf+0x126>
    2910:	93 37       	cpi	r25, 0x73	; 115
    2912:	79 f0       	breq	.+30     	; 0x2932 <vfprintf+0x13c>
    2914:	93 35       	cpi	r25, 0x53	; 83
    2916:	09 f0       	breq	.+2      	; 0x291a <vfprintf+0x124>
    2918:	56 c0       	rjmp	.+172    	; 0x29c6 <vfprintf+0x1d0>
    291a:	20 c0       	rjmp	.+64     	; 0x295c <vfprintf+0x166>
    291c:	f5 01       	movw	r30, r10
    291e:	80 81       	ld	r24, Z
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	42 e0       	ldi	r20, 0x02	; 2
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	a4 0e       	add	r10, r20
    2928:	b5 1e       	adc	r11, r21
    292a:	61 01       	movw	r12, r2
    292c:	01 e0       	ldi	r16, 0x01	; 1
    292e:	10 e0       	ldi	r17, 0x00	; 0
    2930:	12 c0       	rjmp	.+36     	; 0x2956 <vfprintf+0x160>
    2932:	f5 01       	movw	r30, r10
    2934:	c0 80       	ld	r12, Z
    2936:	d1 80       	ldd	r13, Z+1	; 0x01
    2938:	f6 fc       	sbrc	r15, 6
    293a:	03 c0       	rjmp	.+6      	; 0x2942 <vfprintf+0x14c>
    293c:	6f ef       	ldi	r22, 0xFF	; 255
    293e:	7f ef       	ldi	r23, 0xFF	; 255
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <vfprintf+0x150>
    2942:	69 2d       	mov	r22, r9
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	42 e0       	ldi	r20, 0x02	; 2
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	a4 0e       	add	r10, r20
    294c:	b5 1e       	adc	r11, r21
    294e:	c6 01       	movw	r24, r12
    2950:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <strnlen>
    2954:	8c 01       	movw	r16, r24
    2956:	5f e7       	ldi	r21, 0x7F	; 127
    2958:	f5 22       	and	r15, r21
    295a:	14 c0       	rjmp	.+40     	; 0x2984 <vfprintf+0x18e>
    295c:	f5 01       	movw	r30, r10
    295e:	c0 80       	ld	r12, Z
    2960:	d1 80       	ldd	r13, Z+1	; 0x01
    2962:	f6 fc       	sbrc	r15, 6
    2964:	03 c0       	rjmp	.+6      	; 0x296c <vfprintf+0x176>
    2966:	6f ef       	ldi	r22, 0xFF	; 255
    2968:	7f ef       	ldi	r23, 0xFF	; 255
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <vfprintf+0x17a>
    296c:	69 2d       	mov	r22, r9
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	42 e0       	ldi	r20, 0x02	; 2
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	a4 0e       	add	r10, r20
    2976:	b5 1e       	adc	r11, r21
    2978:	c6 01       	movw	r24, r12
    297a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <strnlen_P>
    297e:	8c 01       	movw	r16, r24
    2980:	50 e8       	ldi	r21, 0x80	; 128
    2982:	f5 2a       	or	r15, r21
    2984:	f3 fe       	sbrs	r15, 3
    2986:	07 c0       	rjmp	.+14     	; 0x2996 <vfprintf+0x1a0>
    2988:	1a c0       	rjmp	.+52     	; 0x29be <vfprintf+0x1c8>
    298a:	80 e2       	ldi	r24, 0x20	; 32
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	b3 01       	movw	r22, r6
    2990:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    2994:	ea 94       	dec	r14
    2996:	8e 2d       	mov	r24, r14
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	08 17       	cp	r16, r24
    299c:	19 07       	cpc	r17, r25
    299e:	a8 f3       	brcs	.-22     	; 0x298a <vfprintf+0x194>
    29a0:	0e c0       	rjmp	.+28     	; 0x29be <vfprintf+0x1c8>
    29a2:	f6 01       	movw	r30, r12
    29a4:	f7 fc       	sbrc	r15, 7
    29a6:	85 91       	lpm	r24, Z+
    29a8:	f7 fe       	sbrs	r15, 7
    29aa:	81 91       	ld	r24, Z+
    29ac:	6f 01       	movw	r12, r30
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	b3 01       	movw	r22, r6
    29b2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    29b6:	e1 10       	cpse	r14, r1
    29b8:	ea 94       	dec	r14
    29ba:	01 50       	subi	r16, 0x01	; 1
    29bc:	10 40       	sbci	r17, 0x00	; 0
    29be:	01 15       	cp	r16, r1
    29c0:	11 05       	cpc	r17, r1
    29c2:	79 f7       	brne	.-34     	; 0x29a2 <vfprintf+0x1ac>
    29c4:	ea c0       	rjmp	.+468    	; 0x2b9a <vfprintf+0x3a4>
    29c6:	94 36       	cpi	r25, 0x64	; 100
    29c8:	11 f0       	breq	.+4      	; 0x29ce <vfprintf+0x1d8>
    29ca:	99 36       	cpi	r25, 0x69	; 105
    29cc:	69 f5       	brne	.+90     	; 0x2a28 <vfprintf+0x232>
    29ce:	f7 fe       	sbrs	r15, 7
    29d0:	08 c0       	rjmp	.+16     	; 0x29e2 <vfprintf+0x1ec>
    29d2:	f5 01       	movw	r30, r10
    29d4:	20 81       	ld	r18, Z
    29d6:	31 81       	ldd	r19, Z+1	; 0x01
    29d8:	42 81       	ldd	r20, Z+2	; 0x02
    29da:	53 81       	ldd	r21, Z+3	; 0x03
    29dc:	84 e0       	ldi	r24, 0x04	; 4
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0a c0       	rjmp	.+20     	; 0x29f6 <vfprintf+0x200>
    29e2:	f5 01       	movw	r30, r10
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	9c 01       	movw	r18, r24
    29ea:	44 27       	eor	r20, r20
    29ec:	37 fd       	sbrc	r19, 7
    29ee:	40 95       	com	r20
    29f0:	54 2f       	mov	r21, r20
    29f2:	82 e0       	ldi	r24, 0x02	; 2
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a8 0e       	add	r10, r24
    29f8:	b9 1e       	adc	r11, r25
    29fa:	9f e6       	ldi	r25, 0x6F	; 111
    29fc:	f9 22       	and	r15, r25
    29fe:	57 ff       	sbrs	r21, 7
    2a00:	09 c0       	rjmp	.+18     	; 0x2a14 <vfprintf+0x21e>
    2a02:	50 95       	com	r21
    2a04:	40 95       	com	r20
    2a06:	30 95       	com	r19
    2a08:	21 95       	neg	r18
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	4f 4f       	sbci	r20, 0xFF	; 255
    2a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a10:	e0 e8       	ldi	r30, 0x80	; 128
    2a12:	fe 2a       	or	r15, r30
    2a14:	ca 01       	movw	r24, r20
    2a16:	b9 01       	movw	r22, r18
    2a18:	a1 01       	movw	r20, r2
    2a1a:	2a e0       	ldi	r18, 0x0A	; 10
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__ultoa_invert>
    2a22:	d8 2e       	mov	r13, r24
    2a24:	d2 18       	sub	r13, r2
    2a26:	40 c0       	rjmp	.+128    	; 0x2aa8 <vfprintf+0x2b2>
    2a28:	95 37       	cpi	r25, 0x75	; 117
    2a2a:	29 f4       	brne	.+10     	; 0x2a36 <vfprintf+0x240>
    2a2c:	1f 2d       	mov	r17, r15
    2a2e:	1f 7e       	andi	r17, 0xEF	; 239
    2a30:	2a e0       	ldi	r18, 0x0A	; 10
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	1d c0       	rjmp	.+58     	; 0x2a70 <vfprintf+0x27a>
    2a36:	1f 2d       	mov	r17, r15
    2a38:	19 7f       	andi	r17, 0xF9	; 249
    2a3a:	9f 36       	cpi	r25, 0x6F	; 111
    2a3c:	61 f0       	breq	.+24     	; 0x2a56 <vfprintf+0x260>
    2a3e:	90 37       	cpi	r25, 0x70	; 112
    2a40:	20 f4       	brcc	.+8      	; 0x2a4a <vfprintf+0x254>
    2a42:	98 35       	cpi	r25, 0x58	; 88
    2a44:	09 f0       	breq	.+2      	; 0x2a48 <vfprintf+0x252>
    2a46:	ac c0       	rjmp	.+344    	; 0x2ba0 <vfprintf+0x3aa>
    2a48:	0f c0       	rjmp	.+30     	; 0x2a68 <vfprintf+0x272>
    2a4a:	90 37       	cpi	r25, 0x70	; 112
    2a4c:	39 f0       	breq	.+14     	; 0x2a5c <vfprintf+0x266>
    2a4e:	98 37       	cpi	r25, 0x78	; 120
    2a50:	09 f0       	breq	.+2      	; 0x2a54 <vfprintf+0x25e>
    2a52:	a6 c0       	rjmp	.+332    	; 0x2ba0 <vfprintf+0x3aa>
    2a54:	04 c0       	rjmp	.+8      	; 0x2a5e <vfprintf+0x268>
    2a56:	28 e0       	ldi	r18, 0x08	; 8
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	0a c0       	rjmp	.+20     	; 0x2a70 <vfprintf+0x27a>
    2a5c:	10 61       	ori	r17, 0x10	; 16
    2a5e:	14 fd       	sbrc	r17, 4
    2a60:	14 60       	ori	r17, 0x04	; 4
    2a62:	20 e1       	ldi	r18, 0x10	; 16
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	04 c0       	rjmp	.+8      	; 0x2a70 <vfprintf+0x27a>
    2a68:	14 fd       	sbrc	r17, 4
    2a6a:	16 60       	ori	r17, 0x06	; 6
    2a6c:	20 e1       	ldi	r18, 0x10	; 16
    2a6e:	32 e0       	ldi	r19, 0x02	; 2
    2a70:	17 ff       	sbrs	r17, 7
    2a72:	08 c0       	rjmp	.+16     	; 0x2a84 <vfprintf+0x28e>
    2a74:	f5 01       	movw	r30, r10
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	44 e0       	ldi	r20, 0x04	; 4
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	08 c0       	rjmp	.+16     	; 0x2a94 <vfprintf+0x29e>
    2a84:	f5 01       	movw	r30, r10
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	42 e0       	ldi	r20, 0x02	; 2
    2a92:	50 e0       	ldi	r21, 0x00	; 0
    2a94:	a4 0e       	add	r10, r20
    2a96:	b5 1e       	adc	r11, r21
    2a98:	a1 01       	movw	r20, r2
    2a9a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__ultoa_invert>
    2a9e:	d8 2e       	mov	r13, r24
    2aa0:	d2 18       	sub	r13, r2
    2aa2:	8f e7       	ldi	r24, 0x7F	; 127
    2aa4:	f8 2e       	mov	r15, r24
    2aa6:	f1 22       	and	r15, r17
    2aa8:	f6 fe       	sbrs	r15, 6
    2aaa:	0b c0       	rjmp	.+22     	; 0x2ac2 <vfprintf+0x2cc>
    2aac:	5e ef       	ldi	r21, 0xFE	; 254
    2aae:	f5 22       	and	r15, r21
    2ab0:	d9 14       	cp	r13, r9
    2ab2:	38 f4       	brcc	.+14     	; 0x2ac2 <vfprintf+0x2cc>
    2ab4:	f4 fe       	sbrs	r15, 4
    2ab6:	07 c0       	rjmp	.+14     	; 0x2ac6 <vfprintf+0x2d0>
    2ab8:	f2 fc       	sbrc	r15, 2
    2aba:	05 c0       	rjmp	.+10     	; 0x2ac6 <vfprintf+0x2d0>
    2abc:	8f ee       	ldi	r24, 0xEF	; 239
    2abe:	f8 22       	and	r15, r24
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <vfprintf+0x2d0>
    2ac2:	1d 2d       	mov	r17, r13
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <vfprintf+0x2d2>
    2ac6:	19 2d       	mov	r17, r9
    2ac8:	f4 fe       	sbrs	r15, 4
    2aca:	0d c0       	rjmp	.+26     	; 0x2ae6 <vfprintf+0x2f0>
    2acc:	fe 01       	movw	r30, r28
    2ace:	ed 0d       	add	r30, r13
    2ad0:	f1 1d       	adc	r31, r1
    2ad2:	80 81       	ld	r24, Z
    2ad4:	80 33       	cpi	r24, 0x30	; 48
    2ad6:	19 f4       	brne	.+6      	; 0x2ade <vfprintf+0x2e8>
    2ad8:	99 ee       	ldi	r25, 0xE9	; 233
    2ada:	f9 22       	and	r15, r25
    2adc:	08 c0       	rjmp	.+16     	; 0x2aee <vfprintf+0x2f8>
    2ade:	1f 5f       	subi	r17, 0xFF	; 255
    2ae0:	f2 fe       	sbrs	r15, 2
    2ae2:	05 c0       	rjmp	.+10     	; 0x2aee <vfprintf+0x2f8>
    2ae4:	03 c0       	rjmp	.+6      	; 0x2aec <vfprintf+0x2f6>
    2ae6:	8f 2d       	mov	r24, r15
    2ae8:	86 78       	andi	r24, 0x86	; 134
    2aea:	09 f0       	breq	.+2      	; 0x2aee <vfprintf+0x2f8>
    2aec:	1f 5f       	subi	r17, 0xFF	; 255
    2aee:	0f 2d       	mov	r16, r15
    2af0:	f3 fc       	sbrc	r15, 3
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <vfprintf+0x326>
    2af4:	f0 fe       	sbrs	r15, 0
    2af6:	0f c0       	rjmp	.+30     	; 0x2b16 <vfprintf+0x320>
    2af8:	1e 15       	cp	r17, r14
    2afa:	10 f0       	brcs	.+4      	; 0x2b00 <vfprintf+0x30a>
    2afc:	9d 2c       	mov	r9, r13
    2afe:	0b c0       	rjmp	.+22     	; 0x2b16 <vfprintf+0x320>
    2b00:	9d 2c       	mov	r9, r13
    2b02:	9e 0c       	add	r9, r14
    2b04:	91 1a       	sub	r9, r17
    2b06:	1e 2d       	mov	r17, r14
    2b08:	06 c0       	rjmp	.+12     	; 0x2b16 <vfprintf+0x320>
    2b0a:	80 e2       	ldi	r24, 0x20	; 32
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	b3 01       	movw	r22, r6
    2b10:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    2b14:	1f 5f       	subi	r17, 0xFF	; 255
    2b16:	1e 15       	cp	r17, r14
    2b18:	c0 f3       	brcs	.-16     	; 0x2b0a <vfprintf+0x314>
    2b1a:	04 c0       	rjmp	.+8      	; 0x2b24 <vfprintf+0x32e>
    2b1c:	1e 15       	cp	r17, r14
    2b1e:	10 f4       	brcc	.+4      	; 0x2b24 <vfprintf+0x32e>
    2b20:	e1 1a       	sub	r14, r17
    2b22:	01 c0       	rjmp	.+2      	; 0x2b26 <vfprintf+0x330>
    2b24:	ee 24       	eor	r14, r14
    2b26:	04 ff       	sbrs	r16, 4
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <vfprintf+0x352>
    2b2a:	80 e3       	ldi	r24, 0x30	; 48
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	b3 01       	movw	r22, r6
    2b30:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    2b34:	02 ff       	sbrs	r16, 2
    2b36:	1d c0       	rjmp	.+58     	; 0x2b72 <vfprintf+0x37c>
    2b38:	01 fd       	sbrc	r16, 1
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <vfprintf+0x34c>
    2b3c:	88 e7       	ldi	r24, 0x78	; 120
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e c0       	rjmp	.+28     	; 0x2b5e <vfprintf+0x368>
    2b42:	88 e5       	ldi	r24, 0x58	; 88
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0b c0       	rjmp	.+22     	; 0x2b5e <vfprintf+0x368>
    2b48:	80 2f       	mov	r24, r16
    2b4a:	86 78       	andi	r24, 0x86	; 134
    2b4c:	91 f0       	breq	.+36     	; 0x2b72 <vfprintf+0x37c>
    2b4e:	01 ff       	sbrs	r16, 1
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <vfprintf+0x360>
    2b52:	8b e2       	ldi	r24, 0x2B	; 43
    2b54:	01 c0       	rjmp	.+2      	; 0x2b58 <vfprintf+0x362>
    2b56:	80 e2       	ldi	r24, 0x20	; 32
    2b58:	f7 fc       	sbrc	r15, 7
    2b5a:	8d e2       	ldi	r24, 0x2D	; 45
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	b3 01       	movw	r22, r6
    2b60:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    2b64:	06 c0       	rjmp	.+12     	; 0x2b72 <vfprintf+0x37c>
    2b66:	80 e3       	ldi	r24, 0x30	; 48
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	b3 01       	movw	r22, r6
    2b6c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    2b70:	9a 94       	dec	r9
    2b72:	d9 14       	cp	r13, r9
    2b74:	c0 f3       	brcs	.-16     	; 0x2b66 <vfprintf+0x370>
    2b76:	da 94       	dec	r13
    2b78:	f1 01       	movw	r30, r2
    2b7a:	ed 0d       	add	r30, r13
    2b7c:	f1 1d       	adc	r31, r1
    2b7e:	80 81       	ld	r24, Z
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	b3 01       	movw	r22, r6
    2b84:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    2b88:	dd 20       	and	r13, r13
    2b8a:	a9 f7       	brne	.-22     	; 0x2b76 <vfprintf+0x380>
    2b8c:	06 c0       	rjmp	.+12     	; 0x2b9a <vfprintf+0x3a4>
    2b8e:	80 e2       	ldi	r24, 0x20	; 32
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	b3 01       	movw	r22, r6
    2b94:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <fputc>
    2b98:	ea 94       	dec	r14
    2b9a:	ee 20       	and	r14, r14
    2b9c:	c1 f7       	brne	.-16     	; 0x2b8e <vfprintf+0x398>
    2b9e:	43 ce       	rjmp	.-890    	; 0x2826 <vfprintf+0x30>
    2ba0:	f3 01       	movw	r30, r6
    2ba2:	66 81       	ldd	r22, Z+6	; 0x06
    2ba4:	77 81       	ldd	r23, Z+7	; 0x07
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	2b 96       	adiw	r28, 0x0b	; 11
    2baa:	e2 e1       	ldi	r30, 0x12	; 18
    2bac:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__epilogue_restores__>

00002bb0 <strnlen_P>:
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	05 90       	lpm	r0, Z+
    2bb4:	61 50       	subi	r22, 0x01	; 1
    2bb6:	70 40       	sbci	r23, 0x00	; 0
    2bb8:	01 10       	cpse	r0, r1
    2bba:	d8 f7       	brcc	.-10     	; 0x2bb2 <strnlen_P+0x2>
    2bbc:	80 95       	com	r24
    2bbe:	90 95       	com	r25
    2bc0:	8e 0f       	add	r24, r30
    2bc2:	9f 1f       	adc	r25, r31
    2bc4:	08 95       	ret

00002bc6 <strnlen>:
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	61 50       	subi	r22, 0x01	; 1
    2bca:	70 40       	sbci	r23, 0x00	; 0
    2bcc:	01 90       	ld	r0, Z+
    2bce:	01 10       	cpse	r0, r1
    2bd0:	d8 f7       	brcc	.-10     	; 0x2bc8 <strnlen+0x2>
    2bd2:	80 95       	com	r24
    2bd4:	90 95       	com	r25
    2bd6:	8e 0f       	add	r24, r30
    2bd8:	9f 1f       	adc	r25, r31
    2bda:	08 95       	ret

00002bdc <fputc>:
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	8c 01       	movw	r16, r24
    2be6:	eb 01       	movw	r28, r22
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	81 ff       	sbrs	r24, 1
    2bec:	1b c0       	rjmp	.+54     	; 0x2c24 <fputc+0x48>
    2bee:	82 ff       	sbrs	r24, 2
    2bf0:	0d c0       	rjmp	.+26     	; 0x2c0c <fputc+0x30>
    2bf2:	2e 81       	ldd	r18, Y+6	; 0x06
    2bf4:	3f 81       	ldd	r19, Y+7	; 0x07
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfa:	28 17       	cp	r18, r24
    2bfc:	39 07       	cpc	r19, r25
    2bfe:	64 f4       	brge	.+24     	; 0x2c18 <fputc+0x3c>
    2c00:	e8 81       	ld	r30, Y
    2c02:	f9 81       	ldd	r31, Y+1	; 0x01
    2c04:	01 93       	st	Z+, r16
    2c06:	f9 83       	std	Y+1, r31	; 0x01
    2c08:	e8 83       	st	Y, r30
    2c0a:	06 c0       	rjmp	.+12     	; 0x2c18 <fputc+0x3c>
    2c0c:	e8 85       	ldd	r30, Y+8	; 0x08
    2c0e:	f9 85       	ldd	r31, Y+9	; 0x09
    2c10:	80 2f       	mov	r24, r16
    2c12:	09 95       	icall
    2c14:	89 2b       	or	r24, r25
    2c16:	31 f4       	brne	.+12     	; 0x2c24 <fputc+0x48>
    2c18:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c1c:	01 96       	adiw	r24, 0x01	; 1
    2c1e:	9f 83       	std	Y+7, r25	; 0x07
    2c20:	8e 83       	std	Y+6, r24	; 0x06
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <fputc+0x4c>
    2c24:	0f ef       	ldi	r16, 0xFF	; 255
    2c26:	1f ef       	ldi	r17, 0xFF	; 255
    2c28:	c8 01       	movw	r24, r16
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	08 95       	ret

00002c34 <__ultoa_invert>:
    2c34:	fa 01       	movw	r30, r20
    2c36:	aa 27       	eor	r26, r26
    2c38:	28 30       	cpi	r18, 0x08	; 8
    2c3a:	51 f1       	breq	.+84     	; 0x2c90 <__ultoa_invert+0x5c>
    2c3c:	20 31       	cpi	r18, 0x10	; 16
    2c3e:	81 f1       	breq	.+96     	; 0x2ca0 <__ultoa_invert+0x6c>
    2c40:	e8 94       	clt
    2c42:	6f 93       	push	r22
    2c44:	6e 7f       	andi	r22, 0xFE	; 254
    2c46:	6e 5f       	subi	r22, 0xFE	; 254
    2c48:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4e:	af 4f       	sbci	r26, 0xFF	; 255
    2c50:	b1 e0       	ldi	r27, 0x01	; 1
    2c52:	3e d0       	rcall	.+124    	; 0x2cd0 <__ultoa_invert+0x9c>
    2c54:	b4 e0       	ldi	r27, 0x04	; 4
    2c56:	3c d0       	rcall	.+120    	; 0x2cd0 <__ultoa_invert+0x9c>
    2c58:	67 0f       	add	r22, r23
    2c5a:	78 1f       	adc	r23, r24
    2c5c:	89 1f       	adc	r24, r25
    2c5e:	9a 1f       	adc	r25, r26
    2c60:	a1 1d       	adc	r26, r1
    2c62:	68 0f       	add	r22, r24
    2c64:	79 1f       	adc	r23, r25
    2c66:	8a 1f       	adc	r24, r26
    2c68:	91 1d       	adc	r25, r1
    2c6a:	a1 1d       	adc	r26, r1
    2c6c:	6a 0f       	add	r22, r26
    2c6e:	71 1d       	adc	r23, r1
    2c70:	81 1d       	adc	r24, r1
    2c72:	91 1d       	adc	r25, r1
    2c74:	a1 1d       	adc	r26, r1
    2c76:	20 d0       	rcall	.+64     	; 0x2cb8 <__ultoa_invert+0x84>
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <__ultoa_invert+0x48>
    2c7a:	68 94       	set
    2c7c:	3f 91       	pop	r19
    2c7e:	2a e0       	ldi	r18, 0x0A	; 10
    2c80:	26 9f       	mul	r18, r22
    2c82:	11 24       	eor	r1, r1
    2c84:	30 19       	sub	r19, r0
    2c86:	30 5d       	subi	r19, 0xD0	; 208
    2c88:	31 93       	st	Z+, r19
    2c8a:	de f6       	brtc	.-74     	; 0x2c42 <__ultoa_invert+0xe>
    2c8c:	cf 01       	movw	r24, r30
    2c8e:	08 95       	ret
    2c90:	46 2f       	mov	r20, r22
    2c92:	47 70       	andi	r20, 0x07	; 7
    2c94:	40 5d       	subi	r20, 0xD0	; 208
    2c96:	41 93       	st	Z+, r20
    2c98:	b3 e0       	ldi	r27, 0x03	; 3
    2c9a:	0f d0       	rcall	.+30     	; 0x2cba <__ultoa_invert+0x86>
    2c9c:	c9 f7       	brne	.-14     	; 0x2c90 <__ultoa_invert+0x5c>
    2c9e:	f6 cf       	rjmp	.-20     	; 0x2c8c <__ultoa_invert+0x58>
    2ca0:	46 2f       	mov	r20, r22
    2ca2:	4f 70       	andi	r20, 0x0F	; 15
    2ca4:	40 5d       	subi	r20, 0xD0	; 208
    2ca6:	4a 33       	cpi	r20, 0x3A	; 58
    2ca8:	18 f0       	brcs	.+6      	; 0x2cb0 <__ultoa_invert+0x7c>
    2caa:	49 5d       	subi	r20, 0xD9	; 217
    2cac:	31 fd       	sbrc	r19, 1
    2cae:	40 52       	subi	r20, 0x20	; 32
    2cb0:	41 93       	st	Z+, r20
    2cb2:	02 d0       	rcall	.+4      	; 0x2cb8 <__ultoa_invert+0x84>
    2cb4:	a9 f7       	brne	.-22     	; 0x2ca0 <__ultoa_invert+0x6c>
    2cb6:	ea cf       	rjmp	.-44     	; 0x2c8c <__ultoa_invert+0x58>
    2cb8:	b4 e0       	ldi	r27, 0x04	; 4
    2cba:	a6 95       	lsr	r26
    2cbc:	97 95       	ror	r25
    2cbe:	87 95       	ror	r24
    2cc0:	77 95       	ror	r23
    2cc2:	67 95       	ror	r22
    2cc4:	ba 95       	dec	r27
    2cc6:	c9 f7       	brne	.-14     	; 0x2cba <__ultoa_invert+0x86>
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	61 05       	cpc	r22, r1
    2ccc:	71 05       	cpc	r23, r1
    2cce:	08 95       	ret
    2cd0:	9b 01       	movw	r18, r22
    2cd2:	ac 01       	movw	r20, r24
    2cd4:	0a 2e       	mov	r0, r26
    2cd6:	06 94       	lsr	r0
    2cd8:	57 95       	ror	r21
    2cda:	47 95       	ror	r20
    2cdc:	37 95       	ror	r19
    2cde:	27 95       	ror	r18
    2ce0:	ba 95       	dec	r27
    2ce2:	c9 f7       	brne	.-14     	; 0x2cd6 <__ultoa_invert+0xa2>
    2ce4:	62 0f       	add	r22, r18
    2ce6:	73 1f       	adc	r23, r19
    2ce8:	84 1f       	adc	r24, r20
    2cea:	95 1f       	adc	r25, r21
    2cec:	a0 1d       	adc	r26, r0
    2cee:	08 95       	ret

00002cf0 <_exit>:
    2cf0:	f8 94       	cli

00002cf2 <__stop_program>:
    2cf2:	ff cf       	rjmp	.-2      	; 0x2cf2 <__stop_program>
